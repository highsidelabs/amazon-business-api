<?php
/**
 * ReportingV20210108Api
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Order History
 *
 * With Amazon Business API for Order History you can create spend reports and track progress towards your spending goals
 *
 * The version of the OpenAPI document: 2021-01-08
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Api;

use AmazonBusinessApi\ApiException;
use AmazonBusinessApi\Configuration;
use AmazonBusinessApi\HeaderSelector;
use AmazonBusinessApi\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * ReportingV20210108Api Class Doc Comment
 *
 * @category Class
 * @package  AmazonBusinessApi
 */
class ReportingV20210108Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param Configuration   $config
     * @param ClientInterface $client
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config;
        $this->headerSelector = $selector ?: new HeaderSelector($this->config);
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getOrdersByOrderDate
     *
     * @param  string $start_date Lower limit for the search range. This date represents the order date (required)
     * @param  string $end_date Upper limit for the search range, This date represents the order date (required)
     * @param  string $next_page_token A page token returned in the response to your previous request when the number of results exceed the page size(100). To get the next page of results, include nextPageToken as the only parameter. When no nextPageToken value is returned there are no more pages to return. This token needs to be encoded (optional)
     * @param  string $purchase_order_number The purchase order number associated with the item of a PPI order. This number is created by the buyer. This is an option param to only get order details for a specific purchase order number. **This is currently under testing** (optional)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput
     */
    public function getOrdersByOrderDate($start_date, $end_date, $next_page_token = null, $purchase_order_number = null, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        $response = $this->getOrdersByOrderDateWithHttpInfo($start_date, $end_date, $next_page_token, $purchase_order_number, $include_line_items, $include_shipments, $include_charges);
        return $response;
    }

    /**
     * Operation getOrdersByOrderDateWithHttpInfo
     *
     * @param  string $start_date Lower limit for the search range. This date represents the order date (required)
     * @param  string $end_date Upper limit for the search range, This date represents the order date (required)
     * @param  string $next_page_token A page token returned in the response to your previous request when the number of results exceed the page size(100). To get the next page of results, include nextPageToken as the only parameter. When no nextPageToken value is returned there are no more pages to return. This token needs to be encoded (optional)
     * @param  string $purchase_order_number The purchase order number associated with the item of a PPI order. This number is created by the buyer. This is an option param to only get order details for a specific purchase order number. **This is currently under testing** (optional)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrdersByOrderDateWithHttpInfo($start_date, $end_date, $next_page_token = null, $purchase_order_number = null, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        $request = $this->getOrdersByOrderDateRequest($start_date, $end_date, $next_page_token, $purchase_order_number, $include_line_items, $include_shipments, $include_charges);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);
                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput', $response->getHeaders());
                case 400:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 401:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 403:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 404:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 429:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 500:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 504:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
            }

            $returnType = '\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getOrdersByOrderDateAsync
     *
     * 
     *
     * @param  string $start_date Lower limit for the search range. This date represents the order date (required)
     * @param  string $end_date Upper limit for the search range, This date represents the order date (required)
     * @param  string $next_page_token A page token returned in the response to your previous request when the number of results exceed the page size(100). To get the next page of results, include nextPageToken as the only parameter. When no nextPageToken value is returned there are no more pages to return. This token needs to be encoded (optional)
     * @param  string $purchase_order_number The purchase order number associated with the item of a PPI order. This number is created by the buyer. This is an option param to only get order details for a specific purchase order number. **This is currently under testing** (optional)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersByOrderDateAsync($start_date, $end_date, $next_page_token = null, $purchase_order_number = null, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        return $this->getOrdersByOrderDateAsyncWithHttpInfo($start_date, $end_date, $next_page_token, $purchase_order_number, $include_line_items, $include_shipments, $include_charges);;
    }

    /**
     * Operation getOrdersByOrderDateAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $start_date Lower limit for the search range. This date represents the order date (required)
     * @param  string $end_date Upper limit for the search range, This date represents the order date (required)
     * @param  string $next_page_token A page token returned in the response to your previous request when the number of results exceed the page size(100). To get the next page of results, include nextPageToken as the only parameter. When no nextPageToken value is returned there are no more pages to return. This token needs to be encoded (optional)
     * @param  string $purchase_order_number The purchase order number associated with the item of a PPI order. This number is created by the buyer. This is an option param to only get order details for a specific purchase order number. **This is currently under testing** (optional)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersByOrderDateAsyncWithHttpInfo($start_date, $end_date, $next_page_token = null, $purchase_order_number = null, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        $returnType = '\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput';
        $request = $this->getOrdersByOrderDateRequest($start_date, $end_date, $next_page_token, $purchase_order_number, $include_line_items, $include_shipments, $include_charges);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrdersByOrderDate'
     *
     * @param  string $start_date Lower limit for the search range. This date represents the order date (required)
     * @param  string $end_date Upper limit for the search range, This date represents the order date (required)
     * @param  string $next_page_token A page token returned in the response to your previous request when the number of results exceed the page size(100). To get the next page of results, include nextPageToken as the only parameter. When no nextPageToken value is returned there are no more pages to return. This token needs to be encoded (optional)
     * @param  string $purchase_order_number The purchase order number associated with the item of a PPI order. This number is created by the buyer. This is an option param to only get order details for a specific purchase order number. **This is currently under testing** (optional)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrdersByOrderDateRequest($start_date, $end_date, $next_page_token = null, $purchase_order_number = null, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling getOrdersByOrderDate'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling getOrdersByOrderDate'
            );
        }

        $resourcePath = '/reports/2021-01-08/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($start_date)) {
            $start_date = ObjectSerializer::serializeCollection($start_date, '', true);
        }
        if ($start_date !== null) {
            $queryParams['startDate'] = $start_date;
        }

        // query params
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        if ($next_page_token !== null) {
            $queryParams['nextPageToken'] = $next_page_token;
        }

        // query params
        if (is_array($end_date)) {
            $end_date = ObjectSerializer::serializeCollection($end_date, '', true);
        }
        if ($end_date !== null) {
            $queryParams['endDate'] = $end_date;
        }

        // query params
        if (is_array($purchase_order_number)) {
            $purchase_order_number = ObjectSerializer::serializeCollection($purchase_order_number, '', true);
        }
        if ($purchase_order_number !== null) {
            $queryParams['purchaseOrderNumber'] = $purchase_order_number;
        }

        // query params
        if (is_array($include_line_items)) {
            $include_line_items = ObjectSerializer::serializeCollection($include_line_items, '', true);
        }
        if ($include_line_items !== null) {
            $queryParams['includeLineItems'] = $include_line_items;
        }

        // query params
        if (is_array($include_shipments)) {
            $include_shipments = ObjectSerializer::serializeCollection($include_shipments, '', true);
        }
        if ($include_shipments !== null) {
            $queryParams['includeShipments'] = $include_shipments;
        }

        // query params
        if (is_array($include_charges)) {
            $include_charges = ObjectSerializer::serializeCollection($include_charges, '', true);
        }
        if ($include_charges !== null) {
            $queryParams['includeCharges'] = $include_charges;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrdersByOrderId
     *
     * @param  string $order_id Order identifier to get the corresponding order details (required)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput
     */
    public function getOrdersByOrderId($order_id, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        $response = $this->getOrdersByOrderIdWithHttpInfo($order_id, $include_line_items, $include_shipments, $include_charges);
        return $response;
    }

    /**
     * Operation getOrdersByOrderIdWithHttpInfo
     *
     * @param  string $order_id Order identifier to get the corresponding order details (required)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrdersByOrderIdWithHttpInfo($order_id, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        $request = $this->getOrdersByOrderIdRequest($order_id, $include_line_items, $include_shipments, $include_charges);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);
                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput', $response->getHeaders());
                case 400:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 403:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 404:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 429:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 500:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
                case 504:
                    if ('\AmazonBusinessApi\Model\ReportingV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList', $response->getHeaders());
            }

            $returnType = '\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReportingV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getOrdersByOrderIdAsync
     *
     * 
     *
     * @param  string $order_id Order identifier to get the corresponding order details (required)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersByOrderIdAsync($order_id, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        return $this->getOrdersByOrderIdAsyncWithHttpInfo($order_id, $include_line_items, $include_shipments, $include_charges);;
    }

    /**
     * Operation getOrdersByOrderIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_id Order identifier to get the corresponding order details (required)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersByOrderIdAsyncWithHttpInfo($order_id, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        $returnType = '\AmazonBusinessApi\Model\ReportingV20210108\OrdersOutput';
        $request = $this->getOrdersByOrderIdRequest($order_id, $include_line_items, $include_shipments, $include_charges);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrdersByOrderId'
     *
     * @param  string $order_id Order identifier to get the corresponding order details (required)
     * @param  bool $include_line_items Option to get all line items associated with the order (optional, default to false)
     * @param  bool $include_shipments Option to get all shipments associated with the order (optional, default to false)
     * @param  bool $include_charges Option to get all charges associated with the order (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrdersByOrderIdRequest($order_id, $include_line_items = false, $include_shipments = false, $include_charges = false)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling getOrdersByOrderId'
            );
        }

        $resourcePath = '/reports/2021-01-08/orders/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($include_line_items)) {
            $include_line_items = ObjectSerializer::serializeCollection($include_line_items, '', true);
        }
        if ($include_line_items !== null) {
            $queryParams['includeLineItems'] = $include_line_items;
        }

        // query params
        if (is_array($include_shipments)) {
            $include_shipments = ObjectSerializer::serializeCollection($include_shipments, '', true);
        }
        if ($include_shipments !== null) {
            $queryParams['includeShipments'] = $include_shipments;
        }

        // query params
        if (is_array($include_charges)) {
            $include_charges = ObjectSerializer::serializeCollection($include_charges, '', true);
        }
        if ($include_charges !== null) {
            $queryParams['includeCharges'] = $include_charges;
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Writes to the debug log file
     *
     * @param any $data
     * @return void
     */
    private function writeDebug($data)
    {
        if ($this->config->getDebug()) {
            file_put_contents($this->config->getDebugFile(), '[' . date('Y-m-d H:i:s') . ']: ' . print_r($data, true) . "\n", FILE_APPEND);
        }
    }
}
