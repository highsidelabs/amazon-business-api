<?php
/**
 * ReconciliationV20210108Api
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Payment Reconciliation
 *
 * With the Amazon Business API for Payment Reconciliation, you can build applications that help Amazon Business customers get purchase-related information for reconciling business transactions.
 *
 * The version of the OpenAPI document: 2021-01-08
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Api;

use AmazonBusinessApi\ApiException;
use AmazonBusinessApi\Configuration;
use AmazonBusinessApi\HeaderSelector;
use AmazonBusinessApi\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * ReconciliationV20210108Api Class Doc Comment
 *
 * @category Class
 * @package  AmazonBusinessApi
 */
class ReconciliationV20210108Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param Configuration   $config
     * @param ClientInterface $client
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config;
        $this->headerSelector = $selector ?: new HeaderSelector($this->config);
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getInvoiceDetailsByOrderLineItems
     *
     * @param  \AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsRequest $invoice_details_by_order_line_items_request invoice_details_by_order_line_items_request (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsResponse
     */
    public function getInvoiceDetailsByOrderLineItems($invoice_details_by_order_line_items_request = null)
    {
        $response = $this->getInvoiceDetailsByOrderLineItemsWithHttpInfo($invoice_details_by_order_line_items_request);
        return $response;
    }

    /**
     * Operation getInvoiceDetailsByOrderLineItemsWithHttpInfo
     *
     * @param  \AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsRequest $invoice_details_by_order_line_items_request (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceDetailsByOrderLineItemsWithHttpInfo($invoice_details_by_order_line_items_request = null)
    {
        $request = $this->getInvoiceDetailsByOrderLineItemsRequest($invoice_details_by_order_line_items_request);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);
                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsResponse', $response->getHeaders());
                case 400:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
                case 401:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
                case 403:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
                case 404:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
                case 429:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
                case 500:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
                case 504:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
            }

            $returnType = '\AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getInvoiceDetailsByOrderLineItemsAsync
     *
     * 
     *
     * @param  \AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsRequest $invoice_details_by_order_line_items_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceDetailsByOrderLineItemsAsync($invoice_details_by_order_line_items_request = null)
    {
        return $this->getInvoiceDetailsByOrderLineItemsAsyncWithHttpInfo($invoice_details_by_order_line_items_request);;
    }

    /**
     * Operation getInvoiceDetailsByOrderLineItemsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsRequest $invoice_details_by_order_line_items_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceDetailsByOrderLineItemsAsyncWithHttpInfo($invoice_details_by_order_line_items_request = null)
    {
        $returnType = '\AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsResponse';
        $request = $this->getInvoiceDetailsByOrderLineItemsRequest($invoice_details_by_order_line_items_request);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoiceDetailsByOrderLineItems'
     *
     * @param  \AmazonBusinessApi\Model\ReconciliationV20210108\InvoiceDetailsByOrderLineItemsRequest $invoice_details_by_order_line_items_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoiceDetailsByOrderLineItemsRequest($invoice_details_by_order_line_items_request = null)
    {

        $resourcePath = '/reconciliation/2021-01-08/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($invoice_details_by_order_line_items_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($invoice_details_by_order_line_items_request));
            } else {
                $httpBody = $invoice_details_by_order_line_items_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactions
     *
     * @param  string $feed_start_date The lower limit for the search range. (required)
     * @param  string $feed_end_date The upper limit for the search range. (required)
     * @param  string $next_page_token A page token returned in the response to your previous request. &#x60;nextPageToken&#x60; is returned when the number of results exceed the page size. To get the next page of results, include &#x60;nextPageToken&#x60; as the only parameter. When no &#x60;nextPageToken&#x60; value is returned there are no more pages to return. (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AmazonBusinessApi\Model\ReconciliationV20210108\TransactionsResponse
     */
    public function getTransactions($feed_start_date, $feed_end_date, $next_page_token = null)
    {
        $response = $this->getTransactionsWithHttpInfo($feed_start_date, $feed_end_date, $next_page_token);
        return $response;
    }

    /**
     * Operation getTransactionsWithHttpInfo
     *
     * @param  string $feed_start_date The lower limit for the search range. (required)
     * @param  string $feed_end_date The upper limit for the search range. (required)
     * @param  string $next_page_token A page token returned in the response to your previous request. `nextPageToken` is returned when the number of results exceed the page size. To get the next page of results, include `nextPageToken` as the only parameter. When no `nextPageToken` value is returned there are no more pages to return. (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AmazonBusinessApi\Model\ReconciliationV20210108\TransactionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsWithHttpInfo($feed_start_date, $feed_end_date, $next_page_token = null)
    {
        $request = $this->getTransactionsRequest($feed_start_date, $feed_end_date, $next_page_token);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);
                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\TransactionsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\TransactionsResponse', $response->getHeaders());
                case 429:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
                case 500:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
                case 504:
                    if ('\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList', $response->getHeaders());
            }

            $returnType = '\AmazonBusinessApi\Model\ReconciliationV20210108\TransactionsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\TransactionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ReconciliationV20210108\ErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getTransactionsAsync
     *
     * 
     *
     * @param  string $feed_start_date The lower limit for the search range. (required)
     * @param  string $feed_end_date The upper limit for the search range. (required)
     * @param  string $next_page_token A page token returned in the response to your previous request. `nextPageToken` is returned when the number of results exceed the page size. To get the next page of results, include `nextPageToken` as the only parameter. When no `nextPageToken` value is returned there are no more pages to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsync($feed_start_date, $feed_end_date, $next_page_token = null)
    {
        return $this->getTransactionsAsyncWithHttpInfo($feed_start_date, $feed_end_date, $next_page_token);;
    }

    /**
     * Operation getTransactionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $feed_start_date The lower limit for the search range. (required)
     * @param  string $feed_end_date The upper limit for the search range. (required)
     * @param  string $next_page_token A page token returned in the response to your previous request. `nextPageToken` is returned when the number of results exceed the page size. To get the next page of results, include `nextPageToken` as the only parameter. When no `nextPageToken` value is returned there are no more pages to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsAsyncWithHttpInfo($feed_start_date, $feed_end_date, $next_page_token = null)
    {
        $returnType = '\AmazonBusinessApi\Model\ReconciliationV20210108\TransactionsResponse';
        $request = $this->getTransactionsRequest($feed_start_date, $feed_end_date, $next_page_token);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactions'
     *
     * @param  string $feed_start_date The lower limit for the search range. (required)
     * @param  string $feed_end_date The upper limit for the search range. (required)
     * @param  string $next_page_token A page token returned in the response to your previous request. `nextPageToken` is returned when the number of results exceed the page size. To get the next page of results, include `nextPageToken` as the only parameter. When no `nextPageToken` value is returned there are no more pages to return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsRequest($feed_start_date, $feed_end_date, $next_page_token = null)
    {
        // verify the required parameter 'feed_start_date' is set
        if ($feed_start_date === null || (is_array($feed_start_date) && count($feed_start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feed_start_date when calling getTransactions'
            );
        }
        // verify the required parameter 'feed_end_date' is set
        if ($feed_end_date === null || (is_array($feed_end_date) && count($feed_end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feed_end_date when calling getTransactions'
            );
        }

        $resourcePath = '/reconciliation/2021-01-08/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($feed_start_date)) {
            $feed_start_date = ObjectSerializer::serializeCollection($feed_start_date, '', true);
        }
        if ($feed_start_date !== null) {
            $queryParams['feedStartDate'] = $feed_start_date;
        }

        // query params
        if (is_array($feed_end_date)) {
            $feed_end_date = ObjectSerializer::serializeCollection($feed_end_date, '', true);
        }
        if ($feed_end_date !== null) {
            $queryParams['feedEndDate'] = $feed_end_date;
        }

        // query params
        if (is_array($next_page_token)) {
            $next_page_token = ObjectSerializer::serializeCollection($next_page_token, '', true);
        }
        if ($next_page_token !== null) {
            $queryParams['nextPageToken'] = $next_page_token;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Writes to the debug log file
     *
     * @param any $data
     * @return void
     */
    private function writeDebug($data)
    {
        if ($this->config->getDebug()) {
            file_put_contents($this->config->getDebugFile(), '[' . date('Y-m-d H:i:s') . ']: ' . print_r($data, true) . "\n", FILE_APPEND);
        }
    }
}
