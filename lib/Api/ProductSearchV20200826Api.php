<?php
/**
 * ProductSearchV20200826Api
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Products
 *
 * An API for getting data about products available to Amazon Business customers. This includes information such as the product title, the merchant selling the product, and the current price.
 *
 * The version of the OpenAPI document: 2020-08-26
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Api;

use AmazonBusinessApi\ApiException;
use AmazonBusinessApi\Configuration;
use AmazonBusinessApi\HeaderSelector;
use AmazonBusinessApi\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * ProductSearchV20200826Api Class Doc Comment
 *
 * @category Class
 * @package  AmazonBusinessApi
 */
class ProductSearchV20200826Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param Configuration   $config
     * @param ClientInterface $client
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config;
        $this->headerSelector = $selector ?: new HeaderSelector($this->config);
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getProductsByAsins
     *
     * Result for list of ASIN search.
     *
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsRequest $products_by_asins products_by_asins (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsResponse
     */
    public function getProductsByAsins($x_amz_user_email, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null, $products_by_asins = null)
    {
        $response = $this->getProductsByAsinsWithHttpInfo($x_amz_user_email, $inclusions_for_products, $inclusions_for_offers, $group_tag, $products_by_asins);
        return $response;
    }

    /**
     * Operation getProductsByAsinsWithHttpInfo
     *
     * Result for list of ASIN search.
     *
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsRequest $products_by_asins (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductsByAsinsWithHttpInfo($x_amz_user_email, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null, $products_by_asins = null)
    {
        $request = $this->getProductsByAsinsRequest($x_amz_user_email, $inclusions_for_products, $inclusions_for_offers, $group_tag, $products_by_asins);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);
                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsResponse', $response->getHeaders());
                case 400:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\Error[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\Error[]', $response->getHeaders());
                case 401:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 403:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 404:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 429:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 500:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 503:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
            }

            $returnType = '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\Error[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation getProductsByAsinsAsync
     *
     * Result for list of ASIN search.
     *
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsRequest $products_by_asins (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsByAsinsAsync($x_amz_user_email, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null, $products_by_asins = null)
    {
        return $this->getProductsByAsinsAsyncWithHttpInfo($x_amz_user_email, $inclusions_for_products, $inclusions_for_offers, $group_tag, $products_by_asins);;
    }

    /**
     * Operation getProductsByAsinsAsyncWithHttpInfo
     *
     * Result for list of ASIN search.
     *
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsRequest $products_by_asins (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsByAsinsAsyncWithHttpInfo($x_amz_user_email, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null, $products_by_asins = null)
    {
        $returnType = '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsResponse';
        $request = $this->getProductsByAsinsRequest($x_amz_user_email, $inclusions_for_products, $inclusions_for_offers, $group_tag, $products_by_asins);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductsByAsins'
     *
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsByAsinsRequest $products_by_asins (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductsByAsinsRequest($x_amz_user_email, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null, $products_by_asins = null)
    {
        // verify the required parameter 'x_amz_user_email' is set
        if ($x_amz_user_email === null || (is_array($x_amz_user_email) && count($x_amz_user_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_amz_user_email when calling getProductsByAsins'
            );
        }

        $resourcePath = '/products/2020-08-26/products/getProductsByAsins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($inclusions_for_products)) {
            $inclusions_for_products = ObjectSerializer::serializeCollection($inclusions_for_products, 'form', true);
        }
        if ($inclusions_for_products !== null) {
            $queryParams['inclusionsForProducts'] = $inclusions_for_products;
        }

        // query params
        if (is_array($inclusions_for_offers)) {
            $inclusions_for_offers = ObjectSerializer::serializeCollection($inclusions_for_offers, 'form', true);
        }
        if ($inclusions_for_offers !== null) {
            $queryParams['inclusionsForOffers'] = $inclusions_for_offers;
        }

        // query params
        if (is_array($group_tag)) {
            $group_tag = ObjectSerializer::serializeCollection($group_tag, '', true);
        }
        if ($group_tag !== null) {
            $queryParams['groupTag'] = $group_tag;
        }

        // header params
        if ($x_amz_user_email !== null) {
            $headerParams['x-amz-user-email'] = ObjectSerializer::toHeaderValue($x_amz_user_email);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($products_by_asins)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($products_by_asins));
            } else {
                $httpBody = $products_by_asins;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productsRequest
     *
     * Retrieve product data based on an ASIN identifier.
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer&#39;s request. This parameter does not support geocode. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your requst separate each facet value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsResult
     */
    public function productsRequest($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $quantity = 1, $facets = null, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null)
    {
        $response = $this->productsRequestWithHttpInfo($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code, $quantity, $facets, $inclusions_for_products, $inclusions_for_offers, $group_tag);
        return $response;
    }

    /**
     * Operation productsRequestWithHttpInfo
     *
     * Retrieve product data based on an ASIN identifier.
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter does not support geocode. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your requst separate each facet value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AmazonBusinessApi\Model\ProductSearchV20200826\ProductsResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsRequestWithHttpInfo($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $quantity = 1, $facets = null, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null)
    {
        $request = $this->productsRequestRequest($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code, $quantity, $facets, $inclusions_for_products, $inclusions_for_offers, $group_tag);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);
                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsResult', $response->getHeaders());
                case 400:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\Error[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\Error[]', $response->getHeaders());
                case 401:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 403:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 404:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 429:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 500:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 503:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
            }

            $returnType = '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\Error[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation productsRequestAsync
     *
     * Retrieve product data based on an ASIN identifier.
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter does not support geocode. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your requst separate each facet value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsRequestAsync($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $quantity = 1, $facets = null, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null)
    {
        return $this->productsRequestAsyncWithHttpInfo($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code, $quantity, $facets, $inclusions_for_products, $inclusions_for_offers, $group_tag);;
    }

    /**
     * Operation productsRequestAsyncWithHttpInfo
     *
     * Retrieve product data based on an ASIN identifier.
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter does not support geocode. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your requst separate each facet value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productsRequestAsyncWithHttpInfo($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $quantity = 1, $facets = null, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null)
    {
        $returnType = '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductsResult';
        $request = $this->productsRequestRequest($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code, $quantity, $facets, $inclusions_for_products, $inclusions_for_offers, $group_tag);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'productsRequest'
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter does not support geocode. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your requst separate each facet value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function productsRequestRequest($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $quantity = 1, $facets = null, $inclusions_for_products = null, $inclusions_for_offers = null, $group_tag = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling productsRequest'
            );
        }
        // verify the required parameter 'product_region' is set
        if ($product_region === null || (is_array($product_region) && count($product_region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_region when calling productsRequest'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling productsRequest'
            );
        }
        // verify the required parameter 'x_amz_user_email' is set
        if ($x_amz_user_email === null || (is_array($x_amz_user_email) && count($x_amz_user_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_amz_user_email when calling productsRequest'
            );
        }

        $resourcePath = '/products/2020-08-26/products/{productId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($product_region)) {
            $product_region = ObjectSerializer::serializeCollection($product_region, '', true);
        }
        if ($product_region !== null) {
            $queryParams['productRegion'] = $product_region;
        }

        // query params
        if (is_array($locale)) {
            $locale = ObjectSerializer::serializeCollection($locale, '', true);
        }
        if ($locale !== null) {
            $queryParams['locale'] = $locale;
        }

        // query params
        if (is_array($shipping_postal_code)) {
            $shipping_postal_code = ObjectSerializer::serializeCollection($shipping_postal_code, '', true);
        }
        if ($shipping_postal_code !== null) {
            $queryParams['shippingPostalCode'] = $shipping_postal_code;
        }

        // query params
        if (is_array($quantity)) {
            $quantity = ObjectSerializer::serializeCollection($quantity, '', true);
        }
        if ($quantity !== null) {
            $queryParams['quantity'] = $quantity;
        }

        // query params
        if (is_array($facets)) {
            $facets = ObjectSerializer::serializeCollection($facets, 'form', true);
        }
        if ($facets !== null) {
            $queryParams['facets'] = $facets;
        }

        // query params
        if (is_array($inclusions_for_products)) {
            $inclusions_for_products = ObjectSerializer::serializeCollection($inclusions_for_products, 'form', true);
        }
        if ($inclusions_for_products !== null) {
            $queryParams['inclusionsForProducts'] = $inclusions_for_products;
        }

        // query params
        if (is_array($inclusions_for_offers)) {
            $inclusions_for_offers = ObjectSerializer::serializeCollection($inclusions_for_offers, 'form', true);
        }
        if ($inclusions_for_offers !== null) {
            $queryParams['inclusionsForOffers'] = $inclusions_for_offers;
        }

        // query params
        if (is_array($group_tag)) {
            $group_tag = ObjectSerializer::serializeCollection($group_tag, '', true);
        }
        if ($group_tag !== null) {
            $queryParams['groupTag'] = $group_tag;
        }

        // header params
        if ($x_amz_user_email !== null) {
            $headerParams['x-amz-user-email'] = ObjectSerializer::toHeaderValue($x_amz_user_email);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchOffersRequest
     *
     * Paginated and filtered search for offers of a specific product.
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product for which to get offers. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer&#39;s request. This parameter doesn&#39;t hold geocode. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired per page in response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string[] $filter_ids A list of filter ids to apply to query results. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\OffersResult
     */
    public function searchOffersRequest($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $page_number = null, $page_size = null, $group_tag = null, $filter_ids = null, $quantity = 1, $inclusions_for_offers = null)
    {
        $response = $this->searchOffersRequestWithHttpInfo($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code, $page_number, $page_size, $group_tag, $filter_ids, $quantity, $inclusions_for_offers);
        return $response;
    }

    /**
     * Operation searchOffersRequestWithHttpInfo
     *
     * Paginated and filtered search for offers of a specific product.
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product for which to get offers. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter doesn't hold geocode. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired per page in response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string[] $filter_ids A list of filter ids to apply to query results. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AmazonBusinessApi\Model\ProductSearchV20200826\OffersResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchOffersRequestWithHttpInfo($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $page_number = null, $page_size = null, $group_tag = null, $filter_ids = null, $quantity = 1, $inclusions_for_offers = null)
    {
        $request = $this->searchOffersRequestRequest($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code, $page_number, $page_size, $group_tag, $filter_ids, $quantity, $inclusions_for_offers);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);
                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\OffersResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\OffersResult', $response->getHeaders());
                case 400:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 401:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 403:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 404:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 429:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 500:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 503:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
            }

            $returnType = '\AmazonBusinessApi\Model\ProductSearchV20200826\OffersResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\OffersResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation searchOffersRequestAsync
     *
     * Paginated and filtered search for offers of a specific product.
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product for which to get offers. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter doesn't hold geocode. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired per page in response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string[] $filter_ids A list of filter ids to apply to query results. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchOffersRequestAsync($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $page_number = null, $page_size = null, $group_tag = null, $filter_ids = null, $quantity = 1, $inclusions_for_offers = null)
    {
        return $this->searchOffersRequestAsyncWithHttpInfo($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code, $page_number, $page_size, $group_tag, $filter_ids, $quantity, $inclusions_for_offers);;
    }

    /**
     * Operation searchOffersRequestAsyncWithHttpInfo
     *
     * Paginated and filtered search for offers of a specific product.
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product for which to get offers. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter doesn't hold geocode. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired per page in response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string[] $filter_ids A list of filter ids to apply to query results. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchOffersRequestAsyncWithHttpInfo($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $page_number = null, $page_size = null, $group_tag = null, $filter_ids = null, $quantity = 1, $inclusions_for_offers = null)
    {
        $returnType = '\AmazonBusinessApi\Model\ProductSearchV20200826\OffersResult';
        $request = $this->searchOffersRequestRequest($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code, $page_number, $page_size, $group_tag, $filter_ids, $quantity, $inclusions_for_offers);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchOffersRequest'
     *
     * @param  string $product_id The Amazon Standard Item Identifier (ASIN) for the product for which to get offers. (required)
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter doesn't hold geocode. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired per page in response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string[] $filter_ids A list of filter ids to apply to query results. (optional)
     * @param  int $quantity The number of units the customer intends to purchase. This helps  Amazon to determine quantity-based discounts if an eligible offer is present. Defaults to 1. (optional, default to 1)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchOffersRequestRequest($product_id, $product_region, $locale, $x_amz_user_email, $shipping_postal_code = null, $page_number = null, $page_size = null, $group_tag = null, $filter_ids = null, $quantity = 1, $inclusions_for_offers = null)
    {
        // verify the required parameter 'product_id' is set
        if ($product_id === null || (is_array($product_id) && count($product_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_id when calling searchOffersRequest'
            );
        }
        // verify the required parameter 'product_region' is set
        if ($product_region === null || (is_array($product_region) && count($product_region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_region when calling searchOffersRequest'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling searchOffersRequest'
            );
        }
        // verify the required parameter 'x_amz_user_email' is set
        if ($x_amz_user_email === null || (is_array($x_amz_user_email) && count($x_amz_user_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_amz_user_email when calling searchOffersRequest'
            );
        }

        $resourcePath = '/products/2020-08-26/products/{productId}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($product_region)) {
            $product_region = ObjectSerializer::serializeCollection($product_region, '', true);
        }
        if ($product_region !== null) {
            $queryParams['productRegion'] = $product_region;
        }

        // query params
        if (is_array($locale)) {
            $locale = ObjectSerializer::serializeCollection($locale, '', true);
        }
        if ($locale !== null) {
            $queryParams['locale'] = $locale;
        }

        // query params
        if (is_array($shipping_postal_code)) {
            $shipping_postal_code = ObjectSerializer::serializeCollection($shipping_postal_code, '', true);
        }
        if ($shipping_postal_code !== null) {
            $queryParams['shippingPostalCode'] = $shipping_postal_code;
        }

        // query params
        if (is_array($page_number)) {
            $page_number = ObjectSerializer::serializeCollection($page_number, '', true);
        }
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $page_number;
        }

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }

        // query params
        if (is_array($group_tag)) {
            $group_tag = ObjectSerializer::serializeCollection($group_tag, '', true);
        }
        if ($group_tag !== null) {
            $queryParams['groupTag'] = $group_tag;
        }

        // query params
        if (is_array($filter_ids)) {
            $filter_ids = ObjectSerializer::serializeCollection($filter_ids, 'form', true);
        }
        if ($filter_ids !== null) {
            $queryParams['filterIds'] = $filter_ids;
        }

        // query params
        if (is_array($quantity)) {
            $quantity = ObjectSerializer::serializeCollection($quantity, '', true);
        }
        if ($quantity !== null) {
            $queryParams['quantity'] = $quantity;
        }

        // query params
        if (is_array($inclusions_for_offers)) {
            $inclusions_for_offers = ObjectSerializer::serializeCollection($inclusions_for_offers, 'form', true);
        }
        if ($inclusions_for_offers !== null) {
            $queryParams['inclusionsForOffers'] = $inclusions_for_offers;
        }

        // header params
        if ($x_amz_user_email !== null) {
            $headerParams['x-amz-user-email'] = ObjectSerializer::toHeaderValue($x_amz_user_email);
        }

        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                '{' . 'productId' . '}',
                ObjectSerializer::toPathValue($product_id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchProductsRequest
     *
     * Search for a list products by keyword, and by other additional filter criteria.
     *
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $keywords A list of keywords to use to find products based on indexed text data. (optional)
     * @param  string $shipping_postal_code The postal/zip code for customer&#39;s request. This parameter doesn&#39;t hold geocode. (optional)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your request separate each facet value with a comma. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired in SearchProductsResult response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string $category The category is used to refine the keyword search results, a keyword search can give results across multiple categories, if category is provided in request, search results will be limited to given category. It is an optional parameter if not provided in request then search results will be across all possible categories the requested keyword belongs. (optional)
     * @param  string $sub_category The search subcategory is used to refine the keyword search results, a keyword search within a particular category can give results across multiple subcategories, if subcategory is provided in request, search results will be limited to given subcategory. It is a optional parameter if not provided in request then search results will be across a particular category if category is provided otherwise results will be across all categories the requested keyword belongs. (optional)
     * @param  string $availability The availability is used to refine the keyword search results. It is optional and by default, the search should return the results with the option in stock only. So in the returned result refinement part, there should be two availability Ids. One represents the in stock only, and one represents the include out of stock. If user set availability as include out of stock Id, the result will return products including both in stock and out of stock, which also should be shown in products offers. Same logic applies when user set availability equal to in stock only Id. If a random availability id number is provided, the search should return zero matching products. (optional)
     * @param  string $delivery_day The deliveryDay feature is used to refine the keyword search results. It is optional and by default, the search should return the results with all the available delivery dates. In the returned result refinement part, there should be one Get It Today ID, and one Get It Tomorrow ID. If the user set the deliveryDay with Get It Today ID, then it should return the products that could arrive today, or nothing if no product could arrive today. Same logic goes with Get It Tomorrow ID. (optional)
     * @param  string $eligible_for_free_shipping The eligibleForFreeShipping is used to refine the keyword search results. It is optional and by default, the search should return the results with both free shipping by Amazon as well as not free Shipping by Amazon. So in the returned result refinement part, there should be one eligibleForFreeShipping Id. It represents Free Shipping by Amazon. If the user set the eligibleForFreeShipping as this ID, then the result will only return the products who will have free shipping by Amazon. (optional)
     * @param  string $prime_eligible The prime eligible refinement can be used to filter prime-eligible products. By default, all products (including non-prime eligible) will be returned. (optional)
     * @param  string $upc UPC (Universal Product Code) is a type of code printed on retail product packaging to aid in identifying a particular item (optional)
     * @param  string $isbn International Standard Book Number of the product (optional)
     * @param  string $sku A SKU short for Stock Keeping Unit is a merchant specific identifier for a purchasable good (optional)
     * @param  string $ean EAN (European Article Number) is a 13-digit product identifier, often represented on products as a barcode (optional)
     * @param  string $part_number value of the Part Number field on the product. It is a unique number that is issued by manufacturers to identify individual products. (optional)
     * @param  string $oem_part_number The OEM Part Number is the original part number assigned to this part by the vehicle manufacturer. (optional)
     * @param  string[] $search_refinements A list of search refinements to refine keyword search for relevant results. If you include more than one search refinement in your request separate each refinement value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\SearchProductsResult
     */
    public function searchProductsRequest($product_region, $locale, $x_amz_user_email, $keywords = null, $shipping_postal_code = null, $facets = null, $page_number = null, $page_size = null, $group_tag = null, $category = null, $sub_category = null, $availability = null, $delivery_day = null, $eligible_for_free_shipping = null, $prime_eligible = null, $upc = null, $isbn = null, $sku = null, $ean = null, $part_number = null, $oem_part_number = null, $search_refinements = null, $inclusions_for_products = null, $inclusions_for_offers = null)
    {
        $response = $this->searchProductsRequestWithHttpInfo($product_region, $locale, $x_amz_user_email, $keywords, $shipping_postal_code, $facets, $page_number, $page_size, $group_tag, $category, $sub_category, $availability, $delivery_day, $eligible_for_free_shipping, $prime_eligible, $upc, $isbn, $sku, $ean, $part_number, $oem_part_number, $search_refinements, $inclusions_for_products, $inclusions_for_offers);
        return $response;
    }

    /**
     * Operation searchProductsRequestWithHttpInfo
     *
     * Search for a list products by keyword, and by other additional filter criteria.
     *
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $keywords A list of keywords to use to find products based on indexed text data. (optional)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter doesn't hold geocode. (optional)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your request separate each facet value with a comma. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired in SearchProductsResult response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string $category The category is used to refine the keyword search results, a keyword search can give results across multiple categories, if category is provided in request, search results will be limited to given category. It is an optional parameter if not provided in request then search results will be across all possible categories the requested keyword belongs. (optional)
     * @param  string $sub_category The search subcategory is used to refine the keyword search results, a keyword search within a particular category can give results across multiple subcategories, if subcategory is provided in request, search results will be limited to given subcategory. It is a optional parameter if not provided in request then search results will be across a particular category if category is provided otherwise results will be across all categories the requested keyword belongs. (optional)
     * @param  string $availability The availability is used to refine the keyword search results. It is optional and by default, the search should return the results with the option in stock only. So in the returned result refinement part, there should be two availability Ids. One represents the in stock only, and one represents the include out of stock. If user set availability as include out of stock Id, the result will return products including both in stock and out of stock, which also should be shown in products offers. Same logic applies when user set availability equal to in stock only Id. If a random availability id number is provided, the search should return zero matching products. (optional)
     * @param  string $delivery_day The deliveryDay feature is used to refine the keyword search results. It is optional and by default, the search should return the results with all the available delivery dates. In the returned result refinement part, there should be one Get It Today ID, and one Get It Tomorrow ID. If the user set the deliveryDay with Get It Today ID, then it should return the products that could arrive today, or nothing if no product could arrive today. Same logic goes with Get It Tomorrow ID. (optional)
     * @param  string $eligible_for_free_shipping The eligibleForFreeShipping is used to refine the keyword search results. It is optional and by default, the search should return the results with both free shipping by Amazon as well as not free Shipping by Amazon. So in the returned result refinement part, there should be one eligibleForFreeShipping Id. It represents Free Shipping by Amazon. If the user set the eligibleForFreeShipping as this ID, then the result will only return the products who will have free shipping by Amazon. (optional)
     * @param  string $prime_eligible The prime eligible refinement can be used to filter prime-eligible products. By default, all products (including non-prime eligible) will be returned. (optional)
     * @param  string $upc UPC (Universal Product Code) is a type of code printed on retail product packaging to aid in identifying a particular item (optional)
     * @param  string $isbn International Standard Book Number of the product (optional)
     * @param  string $sku A SKU short for Stock Keeping Unit is a merchant specific identifier for a purchasable good (optional)
     * @param  string $ean EAN (European Article Number) is a 13-digit product identifier, often represented on products as a barcode (optional)
     * @param  string $part_number value of the Part Number field on the product. It is a unique number that is issued by manufacturers to identify individual products. (optional)
     * @param  string $oem_part_number The OEM Part Number is the original part number assigned to this part by the vehicle manufacturer. (optional)
     * @param  string[] $search_refinements A list of search refinements to refine keyword search for relevant results. If you include more than one search refinement in your request separate each refinement value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \AmazonBusinessApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \AmazonBusinessApi\Model\ProductSearchV20200826\SearchProductsResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchProductsRequestWithHttpInfo($product_region, $locale, $x_amz_user_email, $keywords = null, $shipping_postal_code = null, $facets = null, $page_number = null, $page_size = null, $group_tag = null, $category = null, $sub_category = null, $availability = null, $delivery_day = null, $eligible_for_free_shipping = null, $prime_eligible = null, $upc = null, $isbn = null, $sku = null, $ean = null, $part_number = null, $oem_part_number = null, $search_refinements = null, $inclusions_for_products = null, $inclusions_for_offers = null)
    {
        $request = $this->searchProductsRequestRequest($product_region, $locale, $x_amz_user_email, $keywords, $shipping_postal_code, $facets, $page_number, $page_size, $group_tag, $category, $sub_category, $availability, $delivery_day, $eligible_for_free_shipping, $prime_eligible, $upc, $isbn, $sku, $ean, $part_number, $oem_part_number, $search_refinements, $inclusions_for_products, $inclusions_for_offers);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($signedRequest, $options);
                $this->writeDebug($response);
                $this->writeDebug((string) $response->getBody());
            } catch (RequestException $e) {
                $hasResponse = !empty($e->hasResponse());
                $body = (string) ($hasResponse ? $e->getResponse()->getBody() : '[NULL response]');
                $this->writeDebug($e->getResponse());
                $this->writeDebug($body);
                throw new ApiException(
                    "[{$e->getCode()}] {$body}",
                    $e->getCode(),
                    $hasResponse ? $e->getResponse()->getHeaders() : [],
                    $body
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $signedRequest->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()->getContents()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\SearchProductsResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\SearchProductsResult', $response->getHeaders());
                case 400:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 401:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 403:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 404:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 429:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 500:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
                case 503:
                    if ('\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse', $response->getHeaders());
            }

            $returnType = '\AmazonBusinessApi\Model\ProductSearchV20200826\SearchProductsResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\SearchProductsResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AmazonBusinessApi\Model\ProductSearchV20200826\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            $this->writeDebug($e);
            throw $e;
        }
    }

    /**
     * Operation searchProductsRequestAsync
     *
     * Search for a list products by keyword, and by other additional filter criteria.
     *
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $keywords A list of keywords to use to find products based on indexed text data. (optional)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter doesn't hold geocode. (optional)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your request separate each facet value with a comma. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired in SearchProductsResult response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string $category The category is used to refine the keyword search results, a keyword search can give results across multiple categories, if category is provided in request, search results will be limited to given category. It is an optional parameter if not provided in request then search results will be across all possible categories the requested keyword belongs. (optional)
     * @param  string $sub_category The search subcategory is used to refine the keyword search results, a keyword search within a particular category can give results across multiple subcategories, if subcategory is provided in request, search results will be limited to given subcategory. It is a optional parameter if not provided in request then search results will be across a particular category if category is provided otherwise results will be across all categories the requested keyword belongs. (optional)
     * @param  string $availability The availability is used to refine the keyword search results. It is optional and by default, the search should return the results with the option in stock only. So in the returned result refinement part, there should be two availability Ids. One represents the in stock only, and one represents the include out of stock. If user set availability as include out of stock Id, the result will return products including both in stock and out of stock, which also should be shown in products offers. Same logic applies when user set availability equal to in stock only Id. If a random availability id number is provided, the search should return zero matching products. (optional)
     * @param  string $delivery_day The deliveryDay feature is used to refine the keyword search results. It is optional and by default, the search should return the results with all the available delivery dates. In the returned result refinement part, there should be one Get It Today ID, and one Get It Tomorrow ID. If the user set the deliveryDay with Get It Today ID, then it should return the products that could arrive today, or nothing if no product could arrive today. Same logic goes with Get It Tomorrow ID. (optional)
     * @param  string $eligible_for_free_shipping The eligibleForFreeShipping is used to refine the keyword search results. It is optional and by default, the search should return the results with both free shipping by Amazon as well as not free Shipping by Amazon. So in the returned result refinement part, there should be one eligibleForFreeShipping Id. It represents Free Shipping by Amazon. If the user set the eligibleForFreeShipping as this ID, then the result will only return the products who will have free shipping by Amazon. (optional)
     * @param  string $prime_eligible The prime eligible refinement can be used to filter prime-eligible products. By default, all products (including non-prime eligible) will be returned. (optional)
     * @param  string $upc UPC (Universal Product Code) is a type of code printed on retail product packaging to aid in identifying a particular item (optional)
     * @param  string $isbn International Standard Book Number of the product (optional)
     * @param  string $sku A SKU short for Stock Keeping Unit is a merchant specific identifier for a purchasable good (optional)
     * @param  string $ean EAN (European Article Number) is a 13-digit product identifier, often represented on products as a barcode (optional)
     * @param  string $part_number value of the Part Number field on the product. It is a unique number that is issued by manufacturers to identify individual products. (optional)
     * @param  string $oem_part_number The OEM Part Number is the original part number assigned to this part by the vehicle manufacturer. (optional)
     * @param  string[] $search_refinements A list of search refinements to refine keyword search for relevant results. If you include more than one search refinement in your request separate each refinement value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchProductsRequestAsync($product_region, $locale, $x_amz_user_email, $keywords = null, $shipping_postal_code = null, $facets = null, $page_number = null, $page_size = null, $group_tag = null, $category = null, $sub_category = null, $availability = null, $delivery_day = null, $eligible_for_free_shipping = null, $prime_eligible = null, $upc = null, $isbn = null, $sku = null, $ean = null, $part_number = null, $oem_part_number = null, $search_refinements = null, $inclusions_for_products = null, $inclusions_for_offers = null)
    {
        return $this->searchProductsRequestAsyncWithHttpInfo($product_region, $locale, $x_amz_user_email, $keywords, $shipping_postal_code, $facets, $page_number, $page_size, $group_tag, $category, $sub_category, $availability, $delivery_day, $eligible_for_free_shipping, $prime_eligible, $upc, $isbn, $sku, $ean, $part_number, $oem_part_number, $search_refinements, $inclusions_for_products, $inclusions_for_offers);;
    }

    /**
     * Operation searchProductsRequestAsyncWithHttpInfo
     *
     * Search for a list products by keyword, and by other additional filter criteria.
     *
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $keywords A list of keywords to use to find products based on indexed text data. (optional)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter doesn't hold geocode. (optional)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your request separate each facet value with a comma. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired in SearchProductsResult response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string $category The category is used to refine the keyword search results, a keyword search can give results across multiple categories, if category is provided in request, search results will be limited to given category. It is an optional parameter if not provided in request then search results will be across all possible categories the requested keyword belongs. (optional)
     * @param  string $sub_category The search subcategory is used to refine the keyword search results, a keyword search within a particular category can give results across multiple subcategories, if subcategory is provided in request, search results will be limited to given subcategory. It is a optional parameter if not provided in request then search results will be across a particular category if category is provided otherwise results will be across all categories the requested keyword belongs. (optional)
     * @param  string $availability The availability is used to refine the keyword search results. It is optional and by default, the search should return the results with the option in stock only. So in the returned result refinement part, there should be two availability Ids. One represents the in stock only, and one represents the include out of stock. If user set availability as include out of stock Id, the result will return products including both in stock and out of stock, which also should be shown in products offers. Same logic applies when user set availability equal to in stock only Id. If a random availability id number is provided, the search should return zero matching products. (optional)
     * @param  string $delivery_day The deliveryDay feature is used to refine the keyword search results. It is optional and by default, the search should return the results with all the available delivery dates. In the returned result refinement part, there should be one Get It Today ID, and one Get It Tomorrow ID. If the user set the deliveryDay with Get It Today ID, then it should return the products that could arrive today, or nothing if no product could arrive today. Same logic goes with Get It Tomorrow ID. (optional)
     * @param  string $eligible_for_free_shipping The eligibleForFreeShipping is used to refine the keyword search results. It is optional and by default, the search should return the results with both free shipping by Amazon as well as not free Shipping by Amazon. So in the returned result refinement part, there should be one eligibleForFreeShipping Id. It represents Free Shipping by Amazon. If the user set the eligibleForFreeShipping as this ID, then the result will only return the products who will have free shipping by Amazon. (optional)
     * @param  string $prime_eligible The prime eligible refinement can be used to filter prime-eligible products. By default, all products (including non-prime eligible) will be returned. (optional)
     * @param  string $upc UPC (Universal Product Code) is a type of code printed on retail product packaging to aid in identifying a particular item (optional)
     * @param  string $isbn International Standard Book Number of the product (optional)
     * @param  string $sku A SKU short for Stock Keeping Unit is a merchant specific identifier for a purchasable good (optional)
     * @param  string $ean EAN (European Article Number) is a 13-digit product identifier, often represented on products as a barcode (optional)
     * @param  string $part_number value of the Part Number field on the product. It is a unique number that is issued by manufacturers to identify individual products. (optional)
     * @param  string $oem_part_number The OEM Part Number is the original part number assigned to this part by the vehicle manufacturer. (optional)
     * @param  string[] $search_refinements A list of search refinements to refine keyword search for relevant results. If you include more than one search refinement in your request separate each refinement value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchProductsRequestAsyncWithHttpInfo($product_region, $locale, $x_amz_user_email, $keywords = null, $shipping_postal_code = null, $facets = null, $page_number = null, $page_size = null, $group_tag = null, $category = null, $sub_category = null, $availability = null, $delivery_day = null, $eligible_for_free_shipping = null, $prime_eligible = null, $upc = null, $isbn = null, $sku = null, $ean = null, $part_number = null, $oem_part_number = null, $search_refinements = null, $inclusions_for_products = null, $inclusions_for_offers = null)
    {
        $returnType = '\AmazonBusinessApi\Model\ProductSearchV20200826\SearchProductsResult';
        $request = $this->searchProductsRequestRequest($product_region, $locale, $x_amz_user_email, $keywords, $shipping_postal_code, $facets, $page_number, $page_size, $group_tag, $category, $sub_category, $availability, $delivery_day, $eligible_for_free_shipping, $prime_eligible, $upc, $isbn, $sku, $ean, $part_number, $oem_part_number, $search_refinements, $inclusions_for_products, $inclusions_for_offers);
        $signedRequest = $this->config->signRequest(
            $request
        );

        $this->writeDebug($signedRequest);
        $this->writeDebug((string) $signedRequest->getBody());

        return $this->client
            ->sendAsync($signedRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $this->writeDebug($response);
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return ObjectSerializer::deserialize($content, $returnType, $response->getHeaders());
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $hasResponse = !empty($response);
                    $body = (string) ($hasResponse ? $response->getBody() : '[NULL response]');
                    $this->writeDebug($response);
                    $statusCode = $hasResponse ? $response->getStatusCode() : $exception->getCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $hasResponse ? $response->getHeaders() : [],
                        $body
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchProductsRequest'
     *
     * @param  string $product_region The region where you wish to purchase the product. (required)
     * @param  string $locale The locale of the request, in the form of an IETF language tag. Each ProductRegion supports one or more locales. This value should comply with java.util.Locale. (required)
     * @param  string $x_amz_user_email Email address of the user requesting this resource (required)
     * @param  string $keywords A list of keywords to use to find products based on indexed text data. (optional)
     * @param  string $shipping_postal_code The postal/zip code for customer's request. This parameter doesn't hold geocode. (optional)
     * @param  string[] $facets A list of data facets to include in the response. If you include more than one facet in your request separate each facet value with a comma. (optional)
     * @param  int $page_number The zero-based number of the page being requested. If not specified, a default value of 0 will be used. When passed, the value must be equal or greater than zero, and strictly less than the number of pages returned in the response. (optional)
     * @param  int $page_size The number of items desired in SearchProductsResult response. If not specified, a default value of 24 will be used. Maximum items that can be fetched in single request is 24. (optional)
     * @param  string $group_tag Group identifier to determine on behalf of which group a customer is performing this operation. This can be found in your Amazon Business account information. Only necessary if the customer account belongs to more than one group. (optional)
     * @param  string $category The category is used to refine the keyword search results, a keyword search can give results across multiple categories, if category is provided in request, search results will be limited to given category. It is an optional parameter if not provided in request then search results will be across all possible categories the requested keyword belongs. (optional)
     * @param  string $sub_category The search subcategory is used to refine the keyword search results, a keyword search within a particular category can give results across multiple subcategories, if subcategory is provided in request, search results will be limited to given subcategory. It is a optional parameter if not provided in request then search results will be across a particular category if category is provided otherwise results will be across all categories the requested keyword belongs. (optional)
     * @param  string $availability The availability is used to refine the keyword search results. It is optional and by default, the search should return the results with the option in stock only. So in the returned result refinement part, there should be two availability Ids. One represents the in stock only, and one represents the include out of stock. If user set availability as include out of stock Id, the result will return products including both in stock and out of stock, which also should be shown in products offers. Same logic applies when user set availability equal to in stock only Id. If a random availability id number is provided, the search should return zero matching products. (optional)
     * @param  string $delivery_day The deliveryDay feature is used to refine the keyword search results. It is optional and by default, the search should return the results with all the available delivery dates. In the returned result refinement part, there should be one Get It Today ID, and one Get It Tomorrow ID. If the user set the deliveryDay with Get It Today ID, then it should return the products that could arrive today, or nothing if no product could arrive today. Same logic goes with Get It Tomorrow ID. (optional)
     * @param  string $eligible_for_free_shipping The eligibleForFreeShipping is used to refine the keyword search results. It is optional and by default, the search should return the results with both free shipping by Amazon as well as not free Shipping by Amazon. So in the returned result refinement part, there should be one eligibleForFreeShipping Id. It represents Free Shipping by Amazon. If the user set the eligibleForFreeShipping as this ID, then the result will only return the products who will have free shipping by Amazon. (optional)
     * @param  string $prime_eligible The prime eligible refinement can be used to filter prime-eligible products. By default, all products (including non-prime eligible) will be returned. (optional)
     * @param  string $upc UPC (Universal Product Code) is a type of code printed on retail product packaging to aid in identifying a particular item (optional)
     * @param  string $isbn International Standard Book Number of the product (optional)
     * @param  string $sku A SKU short for Stock Keeping Unit is a merchant specific identifier for a purchasable good (optional)
     * @param  string $ean EAN (European Article Number) is a 13-digit product identifier, often represented on products as a barcode (optional)
     * @param  string $part_number value of the Part Number field on the product. It is a unique number that is issued by manufacturers to identify individual products. (optional)
     * @param  string $oem_part_number The OEM Part Number is the original part number assigned to this part by the vehicle manufacturer. (optional)
     * @param  string[] $search_refinements A list of search refinements to refine keyword search for relevant results. If you include more than one search refinement in your request separate each refinement value with a comma. (optional)
     * @param  string[] $inclusions_for_products A list specifying the product fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     * @param  string[] $inclusions_for_offers A list specifying the offer fields you want to be included in your response object. If you do not include this query parameter then all inclusions will be returned. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchProductsRequestRequest($product_region, $locale, $x_amz_user_email, $keywords = null, $shipping_postal_code = null, $facets = null, $page_number = null, $page_size = null, $group_tag = null, $category = null, $sub_category = null, $availability = null, $delivery_day = null, $eligible_for_free_shipping = null, $prime_eligible = null, $upc = null, $isbn = null, $sku = null, $ean = null, $part_number = null, $oem_part_number = null, $search_refinements = null, $inclusions_for_products = null, $inclusions_for_offers = null)
    {
        // verify the required parameter 'product_region' is set
        if ($product_region === null || (is_array($product_region) && count($product_region) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_region when calling searchProductsRequest'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling searchProductsRequest'
            );
        }
        // verify the required parameter 'x_amz_user_email' is set
        if ($x_amz_user_email === null || (is_array($x_amz_user_email) && count($x_amz_user_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_amz_user_email when calling searchProductsRequest'
            );
        }

        $resourcePath = '/products/2020-08-26/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($keywords)) {
            $keywords = ObjectSerializer::serializeCollection($keywords, '', true);
        }
        if ($keywords !== null) {
            $queryParams['keywords'] = $keywords;
        }

        // query params
        if (is_array($product_region)) {
            $product_region = ObjectSerializer::serializeCollection($product_region, '', true);
        }
        if ($product_region !== null) {
            $queryParams['productRegion'] = $product_region;
        }

        // query params
        if (is_array($locale)) {
            $locale = ObjectSerializer::serializeCollection($locale, '', true);
        }
        if ($locale !== null) {
            $queryParams['locale'] = $locale;
        }

        // query params
        if (is_array($shipping_postal_code)) {
            $shipping_postal_code = ObjectSerializer::serializeCollection($shipping_postal_code, '', true);
        }
        if ($shipping_postal_code !== null) {
            $queryParams['shippingPostalCode'] = $shipping_postal_code;
        }

        // query params
        if (is_array($facets)) {
            $facets = ObjectSerializer::serializeCollection($facets, 'form', true);
        }
        if ($facets !== null) {
            $queryParams['facets'] = $facets;
        }

        // query params
        if (is_array($page_number)) {
            $page_number = ObjectSerializer::serializeCollection($page_number, '', true);
        }
        if ($page_number !== null) {
            $queryParams['pageNumber'] = $page_number;
        }

        // query params
        if (is_array($page_size)) {
            $page_size = ObjectSerializer::serializeCollection($page_size, '', true);
        }
        if ($page_size !== null) {
            $queryParams['pageSize'] = $page_size;
        }

        // query params
        if (is_array($group_tag)) {
            $group_tag = ObjectSerializer::serializeCollection($group_tag, '', true);
        }
        if ($group_tag !== null) {
            $queryParams['groupTag'] = $group_tag;
        }

        // query params
        if (is_array($category)) {
            $category = ObjectSerializer::serializeCollection($category, '', true);
        }
        if ($category !== null) {
            $queryParams['category'] = $category;
        }

        // query params
        if (is_array($sub_category)) {
            $sub_category = ObjectSerializer::serializeCollection($sub_category, '', true);
        }
        if ($sub_category !== null) {
            $queryParams['subCategory'] = $sub_category;
        }

        // query params
        if (is_array($availability)) {
            $availability = ObjectSerializer::serializeCollection($availability, '', true);
        }
        if ($availability !== null) {
            $queryParams['availability'] = $availability;
        }

        // query params
        if (is_array($delivery_day)) {
            $delivery_day = ObjectSerializer::serializeCollection($delivery_day, '', true);
        }
        if ($delivery_day !== null) {
            $queryParams['deliveryDay'] = $delivery_day;
        }

        // query params
        if (is_array($eligible_for_free_shipping)) {
            $eligible_for_free_shipping = ObjectSerializer::serializeCollection($eligible_for_free_shipping, '', true);
        }
        if ($eligible_for_free_shipping !== null) {
            $queryParams['eligibleForFreeShipping'] = $eligible_for_free_shipping;
        }

        // query params
        if (is_array($prime_eligible)) {
            $prime_eligible = ObjectSerializer::serializeCollection($prime_eligible, '', true);
        }
        if ($prime_eligible !== null) {
            $queryParams['primeEligible'] = $prime_eligible;
        }

        // query params
        if (is_array($upc)) {
            $upc = ObjectSerializer::serializeCollection($upc, '', true);
        }
        if ($upc !== null) {
            $queryParams['upc'] = $upc;
        }

        // query params
        if (is_array($isbn)) {
            $isbn = ObjectSerializer::serializeCollection($isbn, '', true);
        }
        if ($isbn !== null) {
            $queryParams['isbn'] = $isbn;
        }

        // query params
        if (is_array($sku)) {
            $sku = ObjectSerializer::serializeCollection($sku, '', true);
        }
        if ($sku !== null) {
            $queryParams['sku'] = $sku;
        }

        // query params
        if (is_array($ean)) {
            $ean = ObjectSerializer::serializeCollection($ean, '', true);
        }
        if ($ean !== null) {
            $queryParams['ean'] = $ean;
        }

        // query params
        if (is_array($part_number)) {
            $part_number = ObjectSerializer::serializeCollection($part_number, '', true);
        }
        if ($part_number !== null) {
            $queryParams['partNumber'] = $part_number;
        }

        // query params
        if (is_array($oem_part_number)) {
            $oem_part_number = ObjectSerializer::serializeCollection($oem_part_number, '', true);
        }
        if ($oem_part_number !== null) {
            $queryParams['oemPartNumber'] = $oem_part_number;
        }

        // query params
        if (is_array($search_refinements)) {
            $search_refinements = ObjectSerializer::serializeCollection($search_refinements, 'form', true);
        }
        if ($search_refinements !== null) {
            $queryParams['searchRefinements'] = $search_refinements;
        }

        // query params
        if (is_array($inclusions_for_products)) {
            $inclusions_for_products = ObjectSerializer::serializeCollection($inclusions_for_products, 'form', true);
        }
        if ($inclusions_for_products !== null) {
            $queryParams['inclusionsForProducts'] = $inclusions_for_products;
        }

        // query params
        if (is_array($inclusions_for_offers)) {
            $inclusions_for_offers = ObjectSerializer::serializeCollection($inclusions_for_offers, 'form', true);
        }
        if ($inclusions_for_offers !== null) {
            $queryParams['inclusionsForOffers'] = $inclusions_for_offers;
        }

        // header params
        if ($x_amz_user_email !== null) {
            $headerParams['x-amz-user-email'] = ObjectSerializer::toHeaderValue($x_amz_user_email);
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Writes to the debug log file
     *
     * @param any $data
     * @return void
     */
    private function writeDebug($data)
    {
        if ($this->config->getDebug()) {
            file_put_contents($this->config->getDebugFile(), '[' . date('Y-m-d H:i:s') . ']: ' . print_r($data, true) . "\n", FILE_APPEND);
        }
    }
}
