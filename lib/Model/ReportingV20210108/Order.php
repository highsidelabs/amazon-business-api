<?php
/**
 * Order
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Order History
 *
 * With Amazon Business API for Order History you can create spend reports and track progress towards your spending goals
 *
 * The version of the OpenAPI document: 2021-01-08
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\ReportingV20210108;
use AmazonBusinessApi\Model\BaseModel;
use AmazonBusinessApi\Model\ModelInterface;
use AmazonBusinessApi\ObjectSerializer;
use ArrayAccess;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description The response schema for the getOrdersByDates and getOrdersById operations
 * @package  AmazonBusinessApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Order extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_date' => 'string',
        'order_id' => 'string',
        'purchase_order_number' => 'string',
        'order_quantity' => 'int',
        'order_status' => 'string',
        'last_order_approver_name' => 'string',
        'buying_customer' => '\AmazonBusinessApi\Model\ReportingV20210108\Customer',
        'buyer_group_name' => 'string',
        'business_order_info' => 'map[string,string]',
        'order_sub_total' => '\AmazonBusinessApi\Model\ReportingV20210108\Money',
        'order_shipping_and_handling' => '\AmazonBusinessApi\Model\ReportingV20210108\Money',
        'order_promotion' => '\AmazonBusinessApi\Model\ReportingV20210108\Money',
        'order_tax' => '\AmazonBusinessApi\Model\ReportingV20210108\Money',
        'order_net_total' => '\AmazonBusinessApi\Model\ReportingV20210108\Money',
        'line_items' => '\AmazonBusinessApi\Model\ReportingV20210108\LineItem[]',
        'shipments' => '\AmazonBusinessApi\Model\ReportingV20210108\Shipment[]',
        'charges' => '\AmazonBusinessApi\Model\ReportingV20210108\Charge[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_date' => null,
        'order_id' => null,
        'purchase_order_number' => null,
        'order_quantity' => null,
        'order_status' => null,
        'last_order_approver_name' => null,
        'buying_customer' => null,
        'buyer_group_name' => null,
        'business_order_info' => null,
        'order_sub_total' => null,
        'order_shipping_and_handling' => null,
        'order_promotion' => null,
        'order_tax' => null,
        'order_net_total' => null,
        'line_items' => null,
        'shipments' => null,
        'charges' => null
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_date' => 'orderDate',
        'order_id' => 'orderId',
        'purchase_order_number' => 'purchaseOrderNumber',
        'order_quantity' => 'orderQuantity',
        'order_status' => 'orderStatus',
        'last_order_approver_name' => 'lastOrderApproverName',
        'buying_customer' => 'buyingCustomer',
        'buyer_group_name' => 'buyerGroupName',
        'business_order_info' => 'businessOrderInfo',
        'order_sub_total' => 'orderSubTotal',
        'order_shipping_and_handling' => 'orderShippingAndHandling',
        'order_promotion' => 'orderPromotion',
        'order_tax' => 'orderTax',
        'order_net_total' => 'orderNetTotal',
        'line_items' => 'lineItems',
        'shipments' => 'shipments',
        'charges' => 'charges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
                'order_date' => 'setOrderDate',
        'order_id' => 'setOrderId',
        'purchase_order_number' => 'setPurchaseOrderNumber',
        'order_quantity' => 'setOrderQuantity',
        'order_status' => 'setOrderStatus',
        'last_order_approver_name' => 'setLastOrderApproverName',
        'buying_customer' => 'setBuyingCustomer',
        'buyer_group_name' => 'setBuyerGroupName',
        'business_order_info' => 'setBusinessOrderInfo',
        'order_sub_total' => 'setOrderSubTotal',
        'order_shipping_and_handling' => 'setOrderShippingAndHandling',
        'order_promotion' => 'setOrderPromotion',
        'order_tax' => 'setOrderTax',
        'order_net_total' => 'setOrderNetTotal',
        'line_items' => 'setLineItems',
        'shipments' => 'setShipments',
        'charges' => 'setCharges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_date' => 'getOrderDate',
        'order_id' => 'getOrderId',
        'purchase_order_number' => 'getPurchaseOrderNumber',
        'order_quantity' => 'getOrderQuantity',
        'order_status' => 'getOrderStatus',
        'last_order_approver_name' => 'getLastOrderApproverName',
        'buying_customer' => 'getBuyingCustomer',
        'buyer_group_name' => 'getBuyerGroupName',
        'business_order_info' => 'getBusinessOrderInfo',
        'order_sub_total' => 'getOrderSubTotal',
        'order_shipping_and_handling' => 'getOrderShippingAndHandling',
        'order_promotion' => 'getOrderPromotion',
        'order_tax' => 'getOrderTax',
        'order_net_total' => 'getOrderNetTotal',
        'line_items' => 'getLineItems',
        'shipments' => 'getShipments',
        'charges' => 'getCharges'
    ];



    const ORDER_STATUS_PENDING_APPROVAL = 'Pending Approval';
    const ORDER_STATUS_PAYMENT_CONFIRMED = 'Payment Confirmed';
    const ORDER_STATUS_PENDING_FULFILLMENT = 'Pending Fulfillment';
    const ORDER_STATUS_PENDING = 'Pending';
    const ORDER_STATUS_CANCELLED = 'Cancelled';
    const ORDER_STATUS_CLOSED = 'Closed';
    
    

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderStatusAllowableValues()
    {
        $baseVals = [
            self::ORDER_STATUS_PENDING_APPROVAL,
            self::ORDER_STATUS_PAYMENT_CONFIRMED,
            self::ORDER_STATUS_PENDING_FULFILLMENT,
            self::ORDER_STATUS_PENDING,
            self::ORDER_STATUS_CANCELLED,
            self::ORDER_STATUS_CLOSED,
        ];

        // This is necessary because Amazon does not consistently capitalize their
        // enum values, so we do case-insensitive enum value validation in ObjectSerializer
        return array_map(function ($val) { return strtoupper($val); }, $baseVals);
    }
    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_date'] = $data['order_date'] ?? null;
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['purchase_order_number'] = $data['purchase_order_number'] ?? null;
        $this->container['order_quantity'] = $data['order_quantity'] ?? null;
        $this->container['order_status'] = $data['order_status'] ?? null;
        $this->container['last_order_approver_name'] = $data['last_order_approver_name'] ?? null;
        $this->container['buying_customer'] = $data['buying_customer'] ?? null;
        $this->container['buyer_group_name'] = $data['buyer_group_name'] ?? null;
        $this->container['business_order_info'] = $data['business_order_info'] ?? null;
        $this->container['order_sub_total'] = $data['order_sub_total'] ?? null;
        $this->container['order_shipping_and_handling'] = $data['order_shipping_and_handling'] ?? null;
        $this->container['order_promotion'] = $data['order_promotion'] ?? null;
        $this->container['order_tax'] = $data['order_tax'] ?? null;
        $this->container['order_net_total'] = $data['order_net_total'] ?? null;
        $this->container['line_items'] = $data['line_items'] ?? null;
        $this->container['shipments'] = $data['shipments'] ?? null;
        $this->container['charges'] = $data['charges'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['order_date'] === null) {
            $invalidProperties[] = "'order_date' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['purchase_order_number'] === null) {
            $invalidProperties[] = "'purchase_order_number' can't be null";
        }
        if ($this->container['order_quantity'] === null) {
            $invalidProperties[] = "'order_quantity' can't be null";
        }
        if ($this->container['order_status'] === null) {
            $invalidProperties[] = "'order_status' can't be null";
        }
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (
            !is_null($this->container['order_status']) &&
            !in_array(strtoupper($this->container['order_status']), $allowedValues, true)
        ) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'order_status', must be one of '%s'",
                $this->container['order_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['last_order_approver_name'] === null) {
            $invalidProperties[] = "'last_order_approver_name' can't be null";
        }
        if ($this->container['buying_customer'] === null) {
            $invalidProperties[] = "'buying_customer' can't be null";
        }
        if ($this->container['buyer_group_name'] === null) {
            $invalidProperties[] = "'buyer_group_name' can't be null";
        }
        if ($this->container['business_order_info'] === null) {
            $invalidProperties[] = "'business_order_info' can't be null";
        }
        if ($this->container['order_sub_total'] === null) {
            $invalidProperties[] = "'order_sub_total' can't be null";
        }
        if ($this->container['order_shipping_and_handling'] === null) {
            $invalidProperties[] = "'order_shipping_and_handling' can't be null";
        }
        if ($this->container['order_promotion'] === null) {
            $invalidProperties[] = "'order_promotion' can't be null";
        }
        if ($this->container['order_tax'] === null) {
            $invalidProperties[] = "'order_tax' can't be null";
        }
        if ($this->container['order_net_total'] === null) {
            $invalidProperties[] = "'order_net_total' can't be null";
        }
        return $invalidProperties;
    }


    /**
     * Gets order_date
     *
     * @return string
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param string $order_date Date when order was placed.
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }
    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Amazon order identifier.
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }
    /**
     * Gets purchase_order_number
     *
     * @return string
     */
    public function getPurchaseOrderNumber()
    {
        return $this->container['purchase_order_number'];
    }

    /**
     * Sets purchase_order_number
     *
     * @param string $purchase_order_number Purchase Order Number assigned to the order.
     *
     * @return self
     */
    public function setPurchaseOrderNumber($purchase_order_number)
    {
        $this->container['purchase_order_number'] = $purchase_order_number;

        return $this;
    }
    /**
     * Gets order_quantity
     *
     * @return int
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param int $order_quantity The item quantity relevant to this order.
     *
     * @return self
     */
    public function setOrderQuantity($order_quantity)
    {
        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }
    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status The status of the order.
     *
     * @return self
     */
    public function setOrderStatus($order_status)
    {
        $allowedValues = $this->getOrderStatusAllowableValues();
        if (!in_array(strtoupper($order_status), $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'order_status', must be one of '%s'",
                    $order_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order_status'] = $order_status;

        return $this;
    }
    /**
     * Gets last_order_approver_name
     *
     * @return string
     */
    public function getLastOrderApproverName()
    {
        return $this->container['last_order_approver_name'];
    }

    /**
     * Sets last_order_approver_name
     *
     * @param string $last_order_approver_name Name of the last person who took action on order approval.
     *
     * @return self
     */
    public function setLastOrderApproverName($last_order_approver_name)
    {
        $this->container['last_order_approver_name'] = $last_order_approver_name;

        return $this;
    }
    /**
     * Gets buying_customer
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Customer
     */
    public function getBuyingCustomer()
    {
        return $this->container['buying_customer'];
    }

    /**
     * Sets buying_customer
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Customer $buying_customer buying_customer
     *
     * @return self
     */
    public function setBuyingCustomer($buying_customer)
    {
        $this->container['buying_customer'] = $buying_customer;

        return $this;
    }
    /**
     * Gets buyer_group_name
     *
     * @return string
     */
    public function getBuyerGroupName()
    {
        return $this->container['buyer_group_name'];
    }

    /**
     * Sets buyer_group_name
     *
     * @param string $buyer_group_name The group within the business from which the order was placed.
     *
     * @return self
     */
    public function setBuyerGroupName($buyer_group_name)
    {
        $this->container['buyer_group_name'] = $buyer_group_name;

        return $this;
    }
    /**
     * Gets business_order_info
     *
     * @return map[string,string]
     */
    public function getBusinessOrderInfo()
    {
        return $this->container['business_order_info'];
    }

    /**
     * Sets business_order_info
     *
     * @param map[string,string] $business_order_info Additional information provided at checkout.
     *
     * @return self
     */
    public function setBusinessOrderInfo($business_order_info)
    {
        $this->container['business_order_info'] = $business_order_info;

        return $this;
    }
    /**
     * Gets order_sub_total
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Money
     */
    public function getOrderSubTotal()
    {
        return $this->container['order_sub_total'];
    }

    /**
     * Sets order_sub_total
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Money $order_sub_total order_sub_total
     *
     * @return self
     */
    public function setOrderSubTotal($order_sub_total)
    {
        $this->container['order_sub_total'] = $order_sub_total;

        return $this;
    }
    /**
     * Gets order_shipping_and_handling
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Money
     */
    public function getOrderShippingAndHandling()
    {
        return $this->container['order_shipping_and_handling'];
    }

    /**
     * Sets order_shipping_and_handling
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Money $order_shipping_and_handling order_shipping_and_handling
     *
     * @return self
     */
    public function setOrderShippingAndHandling($order_shipping_and_handling)
    {
        $this->container['order_shipping_and_handling'] = $order_shipping_and_handling;

        return $this;
    }
    /**
     * Gets order_promotion
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Money
     */
    public function getOrderPromotion()
    {
        return $this->container['order_promotion'];
    }

    /**
     * Sets order_promotion
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Money $order_promotion order_promotion
     *
     * @return self
     */
    public function setOrderPromotion($order_promotion)
    {
        $this->container['order_promotion'] = $order_promotion;

        return $this;
    }
    /**
     * Gets order_tax
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Money
     */
    public function getOrderTax()
    {
        return $this->container['order_tax'];
    }

    /**
     * Sets order_tax
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Money $order_tax order_tax
     *
     * @return self
     */
    public function setOrderTax($order_tax)
    {
        $this->container['order_tax'] = $order_tax;

        return $this;
    }
    /**
     * Gets order_net_total
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Money
     */
    public function getOrderNetTotal()
    {
        return $this->container['order_net_total'];
    }

    /**
     * Sets order_net_total
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Money $order_net_total order_net_total
     *
     * @return self
     */
    public function setOrderNetTotal($order_net_total)
    {
        $this->container['order_net_total'] = $order_net_total;

        return $this;
    }
    /**
     * Gets line_items
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\LineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\LineItem[]|null $line_items Total items of the order
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }
    /**
     * Gets shipments
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Shipment[]|null
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Shipment[]|null $shipments Total shipments of the order
     *
     * @return self
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }
    /**
     * Gets charges
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Charge[]|null
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Charge[]|null $charges Total charges of the order
     *
     * @return self
     */
    public function setCharges($charges)
    {
        $this->container['charges'] = $charges;

        return $this;
    }
}


