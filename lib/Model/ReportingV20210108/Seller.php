<?php
/**
 * Seller
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Order History
 *
 * With Amazon Business API for Order History you can create spend reports and track progress towards your spending goals
 *
 * The version of the OpenAPI document: 2021-01-08
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\ReportingV20210108;
use AmazonBusinessApi\Model\BaseModel;
use AmazonBusinessApi\Model\ModelInterface;
use AmazonBusinessApi\ObjectSerializer;
use ArrayAccess;

/**
 * Seller Class Doc Comment
 *
 * @category Class
 * @description This attribute represents the name, city, state and postal code of the selling merchant.
 * @package  AmazonBusinessApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Seller extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Seller';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'seller_name' => 'string',
        'seller_city' => 'string',
        'seller_state' => 'string',
        'seller_postal_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'seller_name' => null,
        'seller_city' => null,
        'seller_state' => null,
        'seller_postal_code' => null
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'seller_name' => 'sellerName',
        'seller_city' => 'sellerCity',
        'seller_state' => 'sellerState',
        'seller_postal_code' => 'sellerPostalCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
                'seller_name' => 'setSellerName',
        'seller_city' => 'setSellerCity',
        'seller_state' => 'setSellerState',
        'seller_postal_code' => 'setSellerPostalCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'seller_name' => 'getSellerName',
        'seller_city' => 'getSellerCity',
        'seller_state' => 'getSellerState',
        'seller_postal_code' => 'getSellerPostalCode'
    ];


    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['seller_name'] = $data['seller_name'] ?? null;
        $this->container['seller_city'] = $data['seller_city'] ?? null;
        $this->container['seller_state'] = $data['seller_state'] ?? null;
        $this->container['seller_postal_code'] = $data['seller_postal_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['seller_name'] === null) {
            $invalidProperties[] = "'seller_name' can't be null";
        }
        if ($this->container['seller_city'] === null) {
            $invalidProperties[] = "'seller_city' can't be null";
        }
        if ($this->container['seller_state'] === null) {
            $invalidProperties[] = "'seller_state' can't be null";
        }
        if ($this->container['seller_postal_code'] === null) {
            $invalidProperties[] = "'seller_postal_code' can't be null";
        }
        return $invalidProperties;
    }


    /**
     * Gets seller_name
     *
     * @return string
     */
    public function getSellerName()
    {
        return $this->container['seller_name'];
    }

    /**
     * Sets seller_name
     *
     * @param string $seller_name Name of the selling merchant.
     *
     * @return self
     */
    public function setSellerName($seller_name)
    {
        $this->container['seller_name'] = $seller_name;

        return $this;
    }
    /**
     * Gets seller_city
     *
     * @return string
     */
    public function getSellerCity()
    {
        return $this->container['seller_city'];
    }

    /**
     * Sets seller_city
     *
     * @param string $seller_city City of the selling merchant.
     *
     * @return self
     */
    public function setSellerCity($seller_city)
    {
        $this->container['seller_city'] = $seller_city;

        return $this;
    }
    /**
     * Gets seller_state
     *
     * @return string
     */
    public function getSellerState()
    {
        return $this->container['seller_state'];
    }

    /**
     * Sets seller_state
     *
     * @param string $seller_state State of the selling merchant.
     *
     * @return self
     */
    public function setSellerState($seller_state)
    {
        $this->container['seller_state'] = $seller_state;

        return $this;
    }
    /**
     * Gets seller_postal_code
     *
     * @return string
     */
    public function getSellerPostalCode()
    {
        return $this->container['seller_postal_code'];
    }

    /**
     * Sets seller_postal_code
     *
     * @param string $seller_postal_code Postal code of the selling merchant.
     *
     * @return self
     */
    public function setSellerPostalCode($seller_postal_code)
    {
        $this->container['seller_postal_code'] = $seller_postal_code;

        return $this;
    }
}


