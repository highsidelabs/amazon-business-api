<?php
/**
 * Charge
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Order History
 *
 * With Amazon Business API for Order History you can create spend reports and track progress towards your spending goals
 *
 * The version of the OpenAPI document: 2021-01-08
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\ReportingV20210108;
use AmazonBusinessApi\Model\BaseModel;
use AmazonBusinessApi\Model\ModelInterface;
use AmazonBusinessApi\ObjectSerializer;
use ArrayAccess;

/**
 * Charge Class Doc Comment
 *
 * @category Class
 * @description This attribute represents a charge object
 * @package  AmazonBusinessApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Charge extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Charge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_date' => 'string',
        'transaction_id' => 'string',
        'amount' => '\AmazonBusinessApi\Model\ReportingV20210108\Money',
        'payment_instrument_type' => 'string',
        'payment_instrument_last4_digits' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_date' => null,
        'transaction_id' => null,
        'amount' => null,
        'payment_instrument_type' => null,
        'payment_instrument_last4_digits' => null
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_date' => 'transactionDate',
        'transaction_id' => 'transactionId',
        'amount' => 'amount',
        'payment_instrument_type' => 'paymentInstrumentType',
        'payment_instrument_last4_digits' => 'paymentInstrumentLast4Digits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
                'transaction_date' => 'setTransactionDate',
        'transaction_id' => 'setTransactionId',
        'amount' => 'setAmount',
        'payment_instrument_type' => 'setPaymentInstrumentType',
        'payment_instrument_last4_digits' => 'setPaymentInstrumentLast4Digits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_date' => 'getTransactionDate',
        'transaction_id' => 'getTransactionId',
        'amount' => 'getAmount',
        'payment_instrument_type' => 'getPaymentInstrumentType',
        'payment_instrument_last4_digits' => 'getPaymentInstrumentLast4Digits'
    ];


    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_date'] = $data['transaction_date'] ?? null;
        $this->container['transaction_id'] = $data['transaction_id'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['payment_instrument_type'] = $data['payment_instrument_type'] ?? null;
        $this->container['payment_instrument_last4_digits'] = $data['payment_instrument_last4_digits'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['transaction_date'] === null) {
            $invalidProperties[] = "'transaction_date' can't be null";
        }
        if ($this->container['transaction_id'] === null) {
            $invalidProperties[] = "'transaction_id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['payment_instrument_type'] === null) {
            $invalidProperties[] = "'payment_instrument_type' can't be null";
        }
        if ($this->container['payment_instrument_last4_digits'] === null) {
            $invalidProperties[] = "'payment_instrument_last4_digits' can't be null";
        }
        return $invalidProperties;
    }


    /**
     * Gets transaction_date
     *
     * @return string
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param string $transaction_date Date when payment was processed.
     *
     * @return self
     */
    public function setTransactionDate($transaction_date)
    {
        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }
    /**
     * Gets transaction_id
     *
     * @return string
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string $transaction_id Transaction reference identifier of the transaction.
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }
    /**
     * Gets amount
     *
     * @return \AmazonBusinessApi\Model\ReportingV20210108\Money
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \AmazonBusinessApi\Model\ReportingV20210108\Money $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }
    /**
     * Gets payment_instrument_type
     *
     * @return string
     */
    public function getPaymentInstrumentType()
    {
        return $this->container['payment_instrument_type'];
    }

    /**
     * Sets payment_instrument_type
     *
     * @param string $payment_instrument_type Credit card, Pay by Invoice, Bank Account, Reward Account, etc.
     *
     * @return self
     */
    public function setPaymentInstrumentType($payment_instrument_type)
    {
        $this->container['payment_instrument_type'] = $payment_instrument_type;

        return $this;
    }
    /**
     * Gets payment_instrument_last4_digits
     *
     * @return string
     */
    public function getPaymentInstrumentLast4Digits()
    {
        return $this->container['payment_instrument_last4_digits'];
    }

    /**
     * Sets payment_instrument_last4_digits
     *
     * @param string $payment_instrument_last4_digits Last 4 digits of card. For Pay by Invoice, it's the statement number.
     *
     * @return self
     */
    public function setPaymentInstrumentLast4Digits($payment_instrument_last4_digits)
    {
        $this->container['payment_instrument_last4_digits'] = $payment_instrument_last4_digits;

        return $this;
    }
}


