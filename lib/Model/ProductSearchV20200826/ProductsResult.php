<?php
/**
 * ProductsResult
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Products
 *
 * An API for getting data about products available to Amazon Business customers. This includes information such as the product title, the merchant selling the product, and the current price.
 *
 * The version of the OpenAPI document: 2020-08-26
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\ProductSearchV20200826;
use AmazonBusinessApi\Model\BaseModel;
use AmazonBusinessApi\Model\ModelInterface;
use AmazonBusinessApi\ObjectSerializer;
use ArrayAccess;

/**
 * ProductsResult Class Doc Comment
 *
 * @category Class
 * @description The result of a request for product data
 * @package  AmazonBusinessApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ProductsResult extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductsResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'asin' => 'string',
        'asin_type' => '\AmazonBusinessApi\Model\ProductSearchV20200826\AsinType',
        'signed_product_id' => 'string',
        'included_data_types' => 'map[string,object[]]',
        'features' => 'string[]',
        'editorial_reviews' => '\AmazonBusinessApi\Model\ProductSearchV20200826\EditorialReview[]',
        'taxonomies' => '\AmazonBusinessApi\Model\ProductSearchV20200826\Taxonomy[]',
        'title' => 'string',
        'url' => 'string',
        'format' => 'string',
        'book_information' => '\AmazonBusinessApi\Model\ProductSearchV20200826\BookInformation',
        'by_line' => '\AmazonBusinessApi\Model\ProductSearchV20200826\Contributor[]',
        'media_information' => '\AmazonBusinessApi\Model\ProductSearchV20200826\MediaInformation',
        'product_overview' => 'map[string,string]',
        'product_details' => 'map[string,map[string,string]]',
        'product_variations' => '\AmazonBusinessApi\Model\ProductSearchV20200826\ProductVariations',
        'customer_reviews_summary' => '\AmazonBusinessApi\Model\ProductSearchV20200826\CustomerReviewsSummary',
        'product_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'asin' => null,
        'asin_type' => null,
        'signed_product_id' => null,
        'included_data_types' => null,
        'features' => null,
        'editorial_reviews' => null,
        'taxonomies' => null,
        'title' => null,
        'url' => null,
        'format' => null,
        'book_information' => null,
        'by_line' => null,
        'media_information' => null,
        'product_overview' => null,
        'product_details' => null,
        'product_variations' => null,
        'customer_reviews_summary' => null,
        'product_description' => null
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'headers' => 'headers',
        'asin' => 'asin',
        'asin_type' => 'asinType',
        'signed_product_id' => 'signedProductId',
        'included_data_types' => 'includedDataTypes',
        'features' => 'features',
        'editorial_reviews' => 'editorialReviews',
        'taxonomies' => 'taxonomies',
        'title' => 'title',
        'url' => 'url',
        'format' => 'format',
        'book_information' => 'bookInformation',
        'by_line' => 'byLine',
        'media_information' => 'mediaInformation',
        'product_overview' => 'productOverview',
        'product_details' => 'productDetails',
        'product_variations' => 'productVariations',
        'customer_reviews_summary' => 'customerReviewsSummary',
        'product_description' => 'productDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'headers' => 'setHeaders',
        'asin' => 'setAsin',
        'asin_type' => 'setAsinType',
        'signed_product_id' => 'setSignedProductId',
        'included_data_types' => 'setIncludedDataTypes',
        'features' => 'setFeatures',
        'editorial_reviews' => 'setEditorialReviews',
        'taxonomies' => 'setTaxonomies',
        'title' => 'setTitle',
        'url' => 'setUrl',
        'format' => 'setFormat',
        'book_information' => 'setBookInformation',
        'by_line' => 'setByLine',
        'media_information' => 'setMediaInformation',
        'product_overview' => 'setProductOverview',
        'product_details' => 'setProductDetails',
        'product_variations' => 'setProductVariations',
        'customer_reviews_summary' => 'setCustomerReviewsSummary',
        'product_description' => 'setProductDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'headers' => 'getHeaders',
        'asin' => 'getAsin',
        'asin_type' => 'getAsinType',
        'signed_product_id' => 'getSignedProductId',
        'included_data_types' => 'getIncludedDataTypes',
        'features' => 'getFeatures',
        'editorial_reviews' => 'getEditorialReviews',
        'taxonomies' => 'getTaxonomies',
        'title' => 'getTitle',
        'url' => 'getUrl',
        'format' => 'getFormat',
        'book_information' => 'getBookInformation',
        'by_line' => 'getByLine',
        'media_information' => 'getMediaInformation',
        'product_overview' => 'getProductOverview',
        'product_details' => 'getProductDetails',
        'product_variations' => 'getProductVariations',
        'customer_reviews_summary' => 'getCustomerReviewsSummary',
        'product_description' => 'getProductDescription'
    ];


    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asin'] = $data['asin'] ?? null;
        $this->container['asin_type'] = $data['asin_type'] ?? null;
        $this->container['signed_product_id'] = $data['signed_product_id'] ?? null;
        $this->container['included_data_types'] = $data['included_data_types'] ?? null;
        $this->container['features'] = $data['features'] ?? null;
        $this->container['editorial_reviews'] = $data['editorial_reviews'] ?? null;
        $this->container['taxonomies'] = $data['taxonomies'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['format'] = $data['format'] ?? null;
        $this->container['book_information'] = $data['book_information'] ?? null;
        $this->container['by_line'] = $data['by_line'] ?? null;
        $this->container['media_information'] = $data['media_information'] ?? null;
        $this->container['product_overview'] = $data['product_overview'] ?? null;
        $this->container['product_details'] = $data['product_details'] ?? null;
        $this->container['product_variations'] = $data['product_variations'] ?? null;
        $this->container['customer_reviews_summary'] = $data['customer_reviews_summary'] ?? null;
        $this->container['product_description'] = $data['product_description'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['asin'] === null) {
            $invalidProperties[] = "'asin' can't be null";
        }
        if ($this->container['asin_type'] === null) {
            $invalidProperties[] = "'asin_type' can't be null";
        }
        if ($this->container['signed_product_id'] === null) {
            $invalidProperties[] = "'signed_product_id' can't be null";
        }
        if ($this->container['included_data_types'] === null) {
            $invalidProperties[] = "'included_data_types' can't be null";
        }
        if ($this->container['features'] === null) {
            $invalidProperties[] = "'features' can't be null";
        }
        if ($this->container['taxonomies'] === null) {
            $invalidProperties[] = "'taxonomies' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['format'] === null) {
            $invalidProperties[] = "'format' can't be null";
        }
        if ($this->container['book_information'] === null) {
            $invalidProperties[] = "'book_information' can't be null";
        }
        if ($this->container['by_line'] === null) {
            $invalidProperties[] = "'by_line' can't be null";
        }
        if ($this->container['media_information'] === null) {
            $invalidProperties[] = "'media_information' can't be null";
        }
        if ($this->container['product_overview'] === null) {
            $invalidProperties[] = "'product_overview' can't be null";
        }
        if ($this->container['product_details'] === null) {
            $invalidProperties[] = "'product_details' can't be null";
        }
        if ($this->container['product_variations'] === null) {
            $invalidProperties[] = "'product_variations' can't be null";
        }
        if ($this->container['customer_reviews_summary'] === null) {
            $invalidProperties[] = "'customer_reviews_summary' can't be null";
        }
        if ($this->container['product_description'] === null) {
            $invalidProperties[] = "'product_description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets API response headers
     *
     * @return array[string]
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets API response headers (only relevant to response models)
     *
     * @param array[string => string] $headers Associative array of response headers.
     *
     * @return self
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;
        return $this;
    }

    /**
     * Gets asin
     *
     * @return string
     */
    public function getAsin()
    {
        return $this->container['asin'];
    }

    /**
     * Sets asin
     *
     * @param string $asin The Amazon ASIN product identifier
     *
     * @return self
     */
    public function setAsin($asin)
    {
        $this->container['asin'] = $asin;

        return $this;
    }
    /**
     * Gets asin_type
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\AsinType
     */
    public function getAsinType()
    {
        return $this->container['asin_type'];
    }

    /**
     * Sets asin_type
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\AsinType $asin_type asin_type
     *
     * @return self
     */
    public function setAsinType($asin_type)
    {
        $this->container['asin_type'] = $asin_type;

        return $this;
    }
    /**
     * Gets signed_product_id
     *
     * @return string
     */
    public function getSignedProductId()
    {
        return $this->container['signed_product_id'];
    }

    /**
     * Sets signed_product_id
     *
     * @param string $signed_product_id Product id signed with information about the request for which it was returned.
     *
     * @return self
     */
    public function setSignedProductId($signed_product_id)
    {
        $this->container['signed_product_id'] = $signed_product_id;

        return $this;
    }
    /**
     * Gets included_data_types
     *
     * @return map[string,object[]]
     */
    public function getIncludedDataTypes()
    {
        return $this->container['included_data_types'];
    }

    /**
     * Sets included_data_types
     *
     * @param map[string,object[]] $included_data_types A list of additional data groups, as specified in the request. Each facet contains a logic grouping of data about the product.
     *
     * @return self
     */
    public function setIncludedDataTypes($included_data_types)
    {
        $this->container['included_data_types'] = $included_data_types;

        return $this;
    }
    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features A list descriptive features of the product, typically shown as a bulleted list.
     *
     * @return self
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }
    /**
     * Gets editorial_reviews
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\EditorialReview[]|null
     */
    public function getEditorialReviews()
    {
        return $this->container['editorial_reviews'];
    }

    /**
     * Sets editorial_reviews
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\EditorialReview[]|null $editorial_reviews A list of editorial reviews for the product. We support a list of standardized editorial review types, and this list contains as many as we have for a product.
     *
     * @return self
     */
    public function setEditorialReviews($editorial_reviews)
    {
        $this->container['editorial_reviews'] = $editorial_reviews;

        return $this;
    }
    /**
     * Gets taxonomies
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\Taxonomy[]
     */
    public function getTaxonomies()
    {
        return $this->container['taxonomies'];
    }

    /**
     * Sets taxonomies
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\Taxonomy[] $taxonomies A list taxonomy classifications for the product. We support a list of standardized taxonomy types, and this list contains as many as we have for a product.
     *
     * @return self
     */
    public function setTaxonomies($taxonomies)
    {
        $this->container['taxonomies'] = $taxonomies;

        return $this;
    }
    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the product, typically shown at the top of an Amazon product page.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url A URL to the product on the Amazon website
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Gets format
     *
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param string $format Type of the product on the Amazon website. For books, this is the binding.
     *
     * @return self
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }
    /**
     * Gets book_information
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\BookInformation
     */
    public function getBookInformation()
    {
        return $this->container['book_information'];
    }

    /**
     * Sets book_information
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\BookInformation $book_information book_information
     *
     * @return self
     */
    public function setBookInformation($book_information)
    {
        $this->container['book_information'] = $book_information;

        return $this;
    }
    /**
     * Gets by_line
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\Contributor[]
     */
    public function getByLine()
    {
        return $this->container['by_line'];
    }

    /**
     * Sets by_line
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\Contributor[] $by_line A product's by-line contributor information, depending on the type of product it will contain details for brand, author(s), editors, etc.
     *
     * @return self
     */
    public function setByLine($by_line)
    {
        $this->container['by_line'] = $by_line;

        return $this;
    }
    /**
     * Gets media_information
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\MediaInformation
     */
    public function getMediaInformation()
    {
        return $this->container['media_information'];
    }

    /**
     * Sets media_information
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\MediaInformation $media_information media_information
     *
     * @return self
     */
    public function setMediaInformation($media_information)
    {
        $this->container['media_information'] = $media_information;

        return $this;
    }
    /**
     * Gets product_overview
     *
     * @return map[string,string]
     */
    public function getProductOverview()
    {
        return $this->container['product_overview'];
    }

    /**
     * Sets product_overview
     *
     * @param map[string,string] $product_overview General descriptive fields of the product
     *
     * @return self
     */
    public function setProductOverview($product_overview)
    {
        $this->container['product_overview'] = $product_overview;

        return $this;
    }
    /**
     * Gets product_details
     *
     * @return map[string,map[string,string]]
     */
    public function getProductDetails()
    {
        return $this->container['product_details'];
    }

    /**
     * Sets product_details
     *
     * @param map[string,map[string,string]] $product_details Nested key/value pairs indicating additional information for product parts
     *
     * @return self
     */
    public function setProductDetails($product_details)
    {
        $this->container['product_details'] = $product_details;

        return $this;
    }
    /**
     * Gets product_variations
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\ProductVariations
     */
    public function getProductVariations()
    {
        return $this->container['product_variations'];
    }

    /**
     * Sets product_variations
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\ProductVariations $product_variations product_variations
     *
     * @return self
     */
    public function setProductVariations($product_variations)
    {
        $this->container['product_variations'] = $product_variations;

        return $this;
    }
    /**
     * Gets customer_reviews_summary
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\CustomerReviewsSummary
     */
    public function getCustomerReviewsSummary()
    {
        return $this->container['customer_reviews_summary'];
    }

    /**
     * Sets customer_reviews_summary
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\CustomerReviewsSummary $customer_reviews_summary customer_reviews_summary
     *
     * @return self
     */
    public function setCustomerReviewsSummary($customer_reviews_summary)
    {
        $this->container['customer_reviews_summary'] = $customer_reviews_summary;

        return $this;
    }
    /**
     * Gets product_description
     *
     * @return string
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string $product_description Description for the given product.
     *
     * @return self
     */
    public function setProductDescription($product_description)
    {
        $this->container['product_description'] = $product_description;

        return $this;
    }
}


