<?php
/**
 * Offer
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Products
 *
 * An API for getting data about products available to Amazon Business customers. This includes information such as the product title, the merchant selling the product, and the current price.
 *
 * The version of the OpenAPI document: 2020-08-26
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\ProductSearchV20200826;

use \AmazonBusinessApi\Model\ModelInterface;
use \AmazonBusinessApi\ObjectSerializer;
use \ArrayAccess;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @description An offer for a product being sold by a merchant. This object contains many of the details a buyer would need to decide on whether to purchase a product.
 * @package  AmazonBusinessApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Offer implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'availability' => 'string',
        'buying_guidance' => 'string',
        'buying_restrictions' => '\AmazonBusinessApi\Model\ProductSearchV20200826\BuyingRestriction[]',
        'fulfillment_type' => 'string',
        'merchant' => '\AmazonBusinessApi\Model\ProductSearchV20200826\Merchant',
        'offer_id' => 'string',
        'price' => '\AmazonBusinessApi\Model\ProductSearchV20200826\Price',
        'list_price' => '\AmazonBusinessApi\Model\ProductSearchV20200826\Price',
        'product_condition' => 'string',
        'product_condition_note' => 'string',
        'condition' => '\AmazonBusinessApi\Model\ProductSearchV20200826\Condition',
        'quantity_limits' => '\AmazonBusinessApi\Model\ProductSearchV20200826\OfferQuantityLimits',
        'quantity_price' => '\AmazonBusinessApi\Model\ProductSearchV20200826\QuantityPrice',
        'tax_exclusive_price' => '\AmazonBusinessApi\Model\ProductSearchV20200826\TaxExclusivePrice',
        'delivery_information' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'availability' => null,
        'buying_guidance' => null,
        'buying_restrictions' => null,
        'fulfillment_type' => null,
        'merchant' => null,
        'offer_id' => null,
        'price' => null,
        'list_price' => null,
        'product_condition' => null,
        'product_condition_note' => null,
        'condition' => null,
        'quantity_limits' => null,
        'quantity_price' => null,
        'tax_exclusive_price' => null,
        'delivery_information' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'availability' => 'availability',
        'buying_guidance' => 'buyingGuidance',
        'buying_restrictions' => 'buyingRestrictions',
        'fulfillment_type' => 'fulfillmentType',
        'merchant' => 'merchant',
        'offer_id' => 'offerId',
        'price' => 'price',
        'list_price' => 'listPrice',
        'product_condition' => 'productCondition',
        'product_condition_note' => 'productConditionNote',
        'condition' => 'condition',
        'quantity_limits' => 'quantityLimits',
        'quantity_price' => 'quantityPrice',
        'tax_exclusive_price' => 'taxExclusivePrice',
        'delivery_information' => 'deliveryInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
                'availability' => 'setAvailability',
        'buying_guidance' => 'setBuyingGuidance',
        'buying_restrictions' => 'setBuyingRestrictions',
        'fulfillment_type' => 'setFulfillmentType',
        'merchant' => 'setMerchant',
        'offer_id' => 'setOfferId',
        'price' => 'setPrice',
        'list_price' => 'setListPrice',
        'product_condition' => 'setProductCondition',
        'product_condition_note' => 'setProductConditionNote',
        'condition' => 'setCondition',
        'quantity_limits' => 'setQuantityLimits',
        'quantity_price' => 'setQuantityPrice',
        'tax_exclusive_price' => 'setTaxExclusivePrice',
        'delivery_information' => 'setDeliveryInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'availability' => 'getAvailability',
        'buying_guidance' => 'getBuyingGuidance',
        'buying_restrictions' => 'getBuyingRestrictions',
        'fulfillment_type' => 'getFulfillmentType',
        'merchant' => 'getMerchant',
        'offer_id' => 'getOfferId',
        'price' => 'getPrice',
        'list_price' => 'getListPrice',
        'product_condition' => 'getProductCondition',
        'product_condition_note' => 'getProductConditionNote',
        'condition' => 'getCondition',
        'quantity_limits' => 'getQuantityLimits',
        'quantity_price' => 'getQuantityPrice',
        'tax_exclusive_price' => 'getTaxExclusivePrice',
        'delivery_information' => 'getDeliveryInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const BUYING_GUIDANCE_PREFERRED = 'PREFERRED';
    const BUYING_GUIDANCE_RESTRICTED = 'RESTRICTED';
    const BUYING_GUIDANCE_BLOCKED = 'BLOCKED';
    const BUYING_GUIDANCE_NONE = 'NONE';
    const BUYING_GUIDANCE_UNKNOWN = 'UNKNOWN';
    

    const FULFILLMENT_TYPE_AMAZON_FULFILLMENT = 'AMAZON_FULFILLMENT';
    const FULFILLMENT_TYPE_MERCHANT_FULFILLMENT = 'MERCHANT_FULFILLMENT';
    const FULFILLMENT_TYPE_OTHER = 'OTHER';
    

    const PRODUCT_CONDITION__NEW = 'NEW';
    const PRODUCT_CONDITION_USED = 'USED';
    const PRODUCT_CONDITION_COLLECTIBLE = 'COLLECTIBLE';
    const PRODUCT_CONDITION_REFURBISHED = 'REFURBISHED';
    const PRODUCT_CONDITION_OTHER = 'OTHER';
    const PRODUCT_CONDITION_UNKNOWN = 'UNKNOWN';
    
    

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBuyingGuidanceAllowableValues()
    {
        return [
            self::BUYING_GUIDANCE_PREFERRED,
            self::BUYING_GUIDANCE_RESTRICTED,
            self::BUYING_GUIDANCE_BLOCKED,
            self::BUYING_GUIDANCE_NONE,
            self::BUYING_GUIDANCE_UNKNOWN,
        ];
    }
    

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFulfillmentTypeAllowableValues()
    {
        return [
            self::FULFILLMENT_TYPE_AMAZON_FULFILLMENT,
            self::FULFILLMENT_TYPE_MERCHANT_FULFILLMENT,
            self::FULFILLMENT_TYPE_OTHER,
        ];
    }
    

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductConditionAllowableValues()
    {
        return [
            self::PRODUCT_CONDITION__NEW,
            self::PRODUCT_CONDITION_USED,
            self::PRODUCT_CONDITION_COLLECTIBLE,
            self::PRODUCT_CONDITION_REFURBISHED,
            self::PRODUCT_CONDITION_OTHER,
            self::PRODUCT_CONDITION_UNKNOWN,
        ];
    }
    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['availability'] = $data['availability'] ?? null;
        $this->container['buying_guidance'] = $data['buying_guidance'] ?? null;
        $this->container['buying_restrictions'] = $data['buying_restrictions'] ?? null;
        $this->container['fulfillment_type'] = $data['fulfillment_type'] ?? null;
        $this->container['merchant'] = $data['merchant'] ?? null;
        $this->container['offer_id'] = $data['offer_id'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['list_price'] = $data['list_price'] ?? null;
        $this->container['product_condition'] = $data['product_condition'] ?? null;
        $this->container['product_condition_note'] = $data['product_condition_note'] ?? null;
        $this->container['condition'] = $data['condition'] ?? null;
        $this->container['quantity_limits'] = $data['quantity_limits'] ?? null;
        $this->container['quantity_price'] = $data['quantity_price'] ?? null;
        $this->container['tax_exclusive_price'] = $data['tax_exclusive_price'] ?? null;
        $this->container['delivery_information'] = $data['delivery_information'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['availability'] === null) {
            $invalidProperties[] = "'availability' can't be null";
        }
        if ($this->container['buying_guidance'] === null) {
            $invalidProperties[] = "'buying_guidance' can't be null";
        }
        $allowedValues = $this->getBuyingGuidanceAllowableValues();
        if (!is_null($this->container['buying_guidance']) && !in_array($this->container['buying_guidance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'buying_guidance', must be one of '%s'",
                $this->container['buying_guidance'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['buying_restrictions'] === null) {
            $invalidProperties[] = "'buying_restrictions' can't be null";
        }
        if ($this->container['fulfillment_type'] === null) {
            $invalidProperties[] = "'fulfillment_type' can't be null";
        }
        $allowedValues = $this->getFulfillmentTypeAllowableValues();
        if (!is_null($this->container['fulfillment_type']) && !in_array($this->container['fulfillment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fulfillment_type', must be one of '%s'",
                $this->container['fulfillment_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['merchant'] === null) {
            $invalidProperties[] = "'merchant' can't be null";
        }
        if ($this->container['offer_id'] === null) {
            $invalidProperties[] = "'offer_id' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['list_price'] === null) {
            $invalidProperties[] = "'list_price' can't be null";
        }
        if ($this->container['product_condition'] === null) {
            $invalidProperties[] = "'product_condition' can't be null";
        }
        $allowedValues = $this->getProductConditionAllowableValues();
        if (!is_null($this->container['product_condition']) && !in_array($this->container['product_condition'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'product_condition', must be one of '%s'",
                $this->container['product_condition'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['product_condition_note'] === null) {
            $invalidProperties[] = "'product_condition_note' can't be null";
        }
        if ($this->container['condition'] === null) {
            $invalidProperties[] = "'condition' can't be null";
        }
        if ($this->container['quantity_limits'] === null) {
            $invalidProperties[] = "'quantity_limits' can't be null";
        }
        if ($this->container['tax_exclusive_price'] === null) {
            $invalidProperties[] = "'tax_exclusive_price' can't be null";
        }
        if ($this->container['delivery_information'] === null) {
            $invalidProperties[] = "'delivery_information' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets availability
     *
     * @return string
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param string $availability How soon the product would be available to be shipped once purchased
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }
    /**
     * Gets buying_guidance
     *
     * @return string
     */
    public function getBuyingGuidance()
    {
        return $this->container['buying_guidance'];
    }

    /**
     * Sets buying_guidance
     *
     * @param string $buying_guidance If the company for which this API is being called provides Amazon Business with Guided Buying policies, this property provides information about whether their organization supports the purchase of this product. If this is not configured for the account, we return the value \"NONE\". Possible values:   * PREFERRED   * RESTRICTED   * BLOCKED   * NONE   * UNKNOWN
     *
     * @return self
     */
    public function setBuyingGuidance($buying_guidance)
    {
        $allowedValues = $this->getBuyingGuidanceAllowableValues();
        if (!in_array($buying_guidance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'buying_guidance', must be one of '%s'",
                    $buying_guidance,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['buying_guidance'] = $buying_guidance;

        return $this;
    }
    /**
     * Gets buying_restrictions
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\BuyingRestriction[]
     */
    public function getBuyingRestrictions()
    {
        return $this->container['buying_restrictions'];
    }

    /**
     * Sets buying_restrictions
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\BuyingRestriction[] $buying_restrictions When present, entries in this property describe the reasons a buyer is restricted from buying a product.
     *
     * @return self
     */
    public function setBuyingRestrictions($buying_restrictions)
    {
        $this->container['buying_restrictions'] = $buying_restrictions;

        return $this;
    }
    /**
     * Gets fulfillment_type
     *
     * @return string
     */
    public function getFulfillmentType()
    {
        return $this->container['fulfillment_type'];
    }

    /**
     * Sets fulfillment_type
     *
     * @param string $fulfillment_type The fulfillment system to use for a product purchase.  Possible values:   * AMAZON   * THIRD_PARTY   * OTHER
     *
     * @return self
     */
    public function setFulfillmentType($fulfillment_type)
    {
        $allowedValues = $this->getFulfillmentTypeAllowableValues();
        if (!in_array($fulfillment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fulfillment_type', must be one of '%s'",
                    $fulfillment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fulfillment_type'] = $fulfillment_type;

        return $this;
    }
    /**
     * Gets merchant
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\Merchant
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\Merchant $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }
    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id The Amazon offer identifier to use when purchasing this product
     *
     * @return self
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }
    /**
     * Gets price
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\Price
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\Price $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }
    /**
     * Gets list_price
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\Price
     */
    public function getListPrice()
    {
        return $this->container['list_price'];
    }

    /**
     * Sets list_price
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\Price $list_price list_price
     *
     * @return self
     */
    public function setListPrice($list_price)
    {
        $this->container['list_price'] = $list_price;

        return $this;
    }
    /**
     * Gets product_condition
     *
     * @return string
     */
    public function getProductCondition()
    {
        return $this->container['product_condition'];
    }

    /**
     * Sets product_condition
     *
     * @param string $product_condition The possible condition of the product being sold by the merchant. Possible values:  *  NEW  * USED  * COLLECTIBLE  * REFURBISHED  * OTHER  * UNKNOWN
     *
     * @return self
     */
    public function setProductCondition($product_condition)
    {
        $allowedValues = $this->getProductConditionAllowableValues();
        if (!in_array($product_condition, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'product_condition', must be one of '%s'",
                    $product_condition,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_condition'] = $product_condition;

        return $this;
    }
    /**
     * Gets product_condition_note
     *
     * @return string
     */
    public function getProductConditionNote()
    {
        return $this->container['product_condition_note'];
    }

    /**
     * Sets product_condition_note
     *
     * @param string $product_condition_note Additional details on the product's condition
     *
     * @return self
     */
    public function setProductConditionNote($product_condition_note)
    {
        $this->container['product_condition_note'] = $product_condition_note;

        return $this;
    }
    /**
     * Gets condition
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\Condition
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\Condition $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }
    /**
     * Gets quantity_limits
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\OfferQuantityLimits
     */
    public function getQuantityLimits()
    {
        return $this->container['quantity_limits'];
    }

    /**
     * Sets quantity_limits
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\OfferQuantityLimits $quantity_limits quantity_limits
     *
     * @return self
     */
    public function setQuantityLimits($quantity_limits)
    {
        $this->container['quantity_limits'] = $quantity_limits;

        return $this;
    }
    /**
     * Gets quantity_price
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\QuantityPrice|null
     */
    public function getQuantityPrice()
    {
        return $this->container['quantity_price'];
    }

    /**
     * Sets quantity_price
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\QuantityPrice|null $quantity_price quantity_price
     *
     * @return self
     */
    public function setQuantityPrice($quantity_price)
    {
        $this->container['quantity_price'] = $quantity_price;

        return $this;
    }
    /**
     * Gets tax_exclusive_price
     *
     * @return \AmazonBusinessApi\Model\ProductSearchV20200826\TaxExclusivePrice
     */
    public function getTaxExclusivePrice()
    {
        return $this->container['tax_exclusive_price'];
    }

    /**
     * Sets tax_exclusive_price
     *
     * @param \AmazonBusinessApi\Model\ProductSearchV20200826\TaxExclusivePrice $tax_exclusive_price tax_exclusive_price
     *
     * @return self
     */
    public function setTaxExclusivePrice($tax_exclusive_price)
    {
        $this->container['tax_exclusive_price'] = $tax_exclusive_price;

        return $this;
    }
    /**
     * Gets delivery_information
     *
     * @return string
     */
    public function getDeliveryInformation()
    {
        return $this->container['delivery_information'];
    }

    /**
     * Sets delivery_information
     *
     * @param string $delivery_information Information regarding the estimated delivery time and delivery price.
     *
     * @return self
     */
    public function setDeliveryInformation($delivery_information)
    {
        $this->container['delivery_information'] = $delivery_information;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Enable iterating over all of the model's attributes in $key => $value format
     *
     * @return \Traversable
     */
    public function getIterator(): \Traversable
    {
        return (function () {
            foreach ($this->container as $key => $value) {
                yield $key => $value;
            }
        })();
    }

    /**
     * Retrieves the property with the given name by converting the property accession
     * to a getter call.
     *
     * @param string $propertyName
     * @return mixed
     */
    public function __get($propertyName)
    {
        // This doesn't make a syntactical difference since PHP is case-insensitive, but
        // makes error messages clearer (e.g. "Call to undefined method getFoo()" rather
        // than "Call to undefined method getfoo()").
        $ucProp = ucfirst($propertyName);
        $getter = "get$ucProp";
        return $this->$getter();
    }

    /**
     * Sets the property with the given name by converting the property accession
     * to a setter call.
     *
     * @param string $propertyName
     * @param mixed $propertyValue
     * @return AmazonBusinessApi\Model\ProductSearchV20200826\Offer
     */
    public function __set($propertyName, $propertyValue)
    {
        $ucProp = ucfirst($propertyName);
        $setter = "set$ucProp";
        $this->$setter($propertyValue);
        return $this;
    }
}


