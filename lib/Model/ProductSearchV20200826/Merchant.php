<?php
/**
 * Merchant
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Products
 *
 * An API for getting data about products available to Amazon Business customers. This includes information such as the product title, the merchant selling the product, and the current price.
 *
 * The version of the OpenAPI document: 2020-08-26
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\ProductSearchV20200826;
use AmazonBusinessApi\Model\BaseModel;
use \AmazonBusinessApi\Model\ModelInterface;
use \AmazonBusinessApi\ObjectSerializer;
use \ArrayAccess;

/**
 * Merchant Class Doc Comment
 *
 * @category Class
 * @description Information about the merchant selling the product
 * @package  AmazonBusinessApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Merchant extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Merchant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_id' => 'string',
        'name' => 'string',
        'mean_feedback_rating' => 'double',
        'total_feedback_count' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_id' => null,
        'name' => null,
        'mean_feedback_rating' => 'double',
        'total_feedback_count' => 'integer'
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchantId',
        'name' => 'name',
        'mean_feedback_rating' => 'meanFeedbackRating',
        'total_feedback_count' => 'totalFeedbackCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
                'merchant_id' => 'setMerchantId',
        'name' => 'setName',
        'mean_feedback_rating' => 'setMeanFeedbackRating',
        'total_feedback_count' => 'setTotalFeedbackCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'name' => 'getName',
        'mean_feedback_rating' => 'getMeanFeedbackRating',
        'total_feedback_count' => 'getTotalFeedbackCount'
    ];


    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['mean_feedback_rating'] = $data['mean_feedback_rating'] ?? null;
        $this->container['total_feedback_count'] = $data['total_feedback_count'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['mean_feedback_rating'] === null) {
            $invalidProperties[] = "'mean_feedback_rating' can't be null";
        }
        if ($this->container['total_feedback_count'] === null) {
            $invalidProperties[] = "'total_feedback_count' can't be null";
        }
        return $invalidProperties;
    }


    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id The unique id of the merchant selling this product.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }
    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The displayable name of the merchant selling this product
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Gets mean_feedback_rating
     *
     * @return double
     */
    public function getMeanFeedbackRating()
    {
        return $this->container['mean_feedback_rating'];
    }

    /**
     * Sets mean_feedback_rating
     *
     * @param double $mean_feedback_rating Mean of the total ratings given to the merchant selling this product
     *
     * @return self
     */
    public function setMeanFeedbackRating($mean_feedback_rating)
    {
        $this->container['mean_feedback_rating'] = $mean_feedback_rating;

        return $this;
    }
    /**
     * Gets total_feedback_count
     *
     * @return float
     */
    public function getTotalFeedbackCount()
    {
        return $this->container['total_feedback_count'];
    }

    /**
     * Sets total_feedback_count
     *
     * @param float $total_feedback_count Total number of reviews for the merchant selling this product
     *
     * @return self
     */
    public function setTotalFeedbackCount($total_feedback_count)
    {
        $this->container['total_feedback_count'] = $total_feedback_count;

        return $this;
    }
}


