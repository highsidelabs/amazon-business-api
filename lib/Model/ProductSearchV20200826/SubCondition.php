<?php
/**
 * SubCondition
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Products
 *
 * An API for getting data about products available to Amazon Business customers. This includes information such as the product title, the merchant selling the product, and the current price.
 *
 * The version of the OpenAPI document: 2020-08-26
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\ProductSearchV20200826;
use \AmazonBusinessApi\Model\ModelInterface;
use \AmazonBusinessApi\ObjectSerializer;
use \ArrayAccess;

/**
 * SubCondition Class Doc Comment
 *
 * @category Class
 * @description The possible sub condition of the product being sold by the merchant. Possible values:  *  ACCEPTABLE  * CLUB  * GOOD  * LIKE_NEW  * NEW  * OEM  * OPEN_BOX  * REFURBISHED  * UNKNOWN  * VERY_GOOD
 * @package  AmazonBusinessApi
 * @group 
 */
class SubCondition
{
    public $value;

    /**
     * Possible values of this enum
     */
    const ACCEPTABLE = 'ACCEPTABLE';
    const CLUB = 'CLUB';
    const GOOD = 'GOOD';
    const LIKE_NEW = 'LIKE_NEW';
    const _NEW = 'NEW';
    const OEM = 'OEM';
    const OPEN_BOX = 'OPEN_BOX';
    const REFURBISHED = 'REFURBISHED';
    const UNKNOWN = 'UNKNOWN';
    const VERY_GOOD = 'VERY_GOOD';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        $baseVals = [
            self::ACCEPTABLE,
            self::CLUB,
            self::GOOD,
            self::LIKE_NEW,
            self::_NEW,
            self::OEM,
            self::OPEN_BOX,
            self::REFURBISHED,
            self::UNKNOWN,
            self::VERY_GOOD,
        ];
        // This is necessary because Amazon does not consistently capitalize their
        // enum values, so we do case-insensitive enum value validation in ObjectSerializer
        $ucVals = array_map(function ($val) { return strtoupper($val); }, $baseVals);
        return array_merge($baseVals, $ucVals);
    }

    public function __construct($value)
    {
        if (is_null($value) || !in_array($value, self::getAllowableEnumValues(), true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value for enum 'SubCondition', must be one of '%s'", implode("', '", self::getAllowableEnumValues())));
        }

        $this->value = $value;
    }

    /**
     * Convert the enum value to a string.
     *
     * @return string
     */
    public function __toString()
    {
        return $this->value;
    }
}


