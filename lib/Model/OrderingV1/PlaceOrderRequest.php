<?php
/**
 * PlaceOrderRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business Ordering API Model
 *
 * With Amazon Business ordering API, integrators can build applications that allow Amazon Business customers to define and execute an order request.
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\OrderingV1;
use AmazonBusinessApi\Model\BaseModel;
use AmazonBusinessApi\Model\ModelInterface;
use AmazonBusinessApi\ObjectSerializer;
use ArrayAccess;

/**
 * PlaceOrderRequest Class Doc Comment
 *
 * @category Class
 * @description A request to place an order.
 * @package  AmazonBusinessApi
 * @group 
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class PlaceOrderRequest extends BaseModel implements ModelInterface, ArrayAccess, \JsonSerializable, \IteratorAggregate
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlaceOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'external_id' => 'string',
        'line_items' => '\AmazonBusinessApi\Model\OrderingV1\RequestLineItem[]',
        'attributes' => '\AmazonBusinessApi\Model\OrderingV1\Attribute[]',
        'expectations' => '\AmazonBusinessApi\Model\OrderingV1\Expectation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'external_id' => null,
        'line_items' => null,
        'attributes' => null,
        'expectations' => null
    ];



    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_id' => 'externalId',
        'line_items' => 'lineItems',
        'attributes' => 'attributes',
        'expectations' => 'expectations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
                'external_id' => 'setExternalId',
        'line_items' => 'setLineItems',
        'attributes' => 'setAttributes',
        'expectations' => 'setExpectations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_id' => 'getExternalId',
        'line_items' => 'getLineItems',
        'attributes' => 'getAttributes',
        'expectations' => 'getExpectations'
    ];


    
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['line_items'] = $data['line_items'] ?? null;
        $this->container['attributes'] = $data['attributes'] ?? null;
        $this->container['expectations'] = $data['expectations'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];
        if ($this->container['external_id'] === null) {
            $invalidProperties[] = "'external_id' can't be null";
        }
        if ((mb_strlen($this->container['external_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['external_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['line_items'] === null) {
            $invalidProperties[] = "'line_items' can't be null";
        }
        if ((count($this->container['line_items']) > 50)) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be less than or equal to 50.";
        }

        if ((count($this->container['line_items']) < 1)) {
            $invalidProperties[] = "invalid value for 'line_items', number of items must be greater than or equal to 1.";
        }

        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['expectations'] === null) {
            $invalidProperties[] = "'expectations' can't be null";
        }
        return $invalidProperties;
    }


    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id A customer-specified identifier that is unique for each order.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if ((mb_strlen($external_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling PlaceOrderRequest., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($external_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling PlaceOrderRequest., must be bigger than or equal to 1.');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }
    /**
     * Gets line_items
     *
     * @return \AmazonBusinessApi\Model\OrderingV1\RequestLineItem[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \AmazonBusinessApi\Model\OrderingV1\RequestLineItem[] $line_items Items in the order.
     *
     * @return self
     */
    public function setLineItems($line_items)
    {

        if ((count($line_items) > 50)) {
            throw new \InvalidArgumentException('invalid value for $line_items when calling PlaceOrderRequest., number of items must be less than or equal to 50.');
        }
        if ((count($line_items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $line_items when calling PlaceOrderRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }
    /**
     * Gets attributes
     *
     * @return \AmazonBusinessApi\Model\OrderingV1\Attribute[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \AmazonBusinessApi\Model\OrderingV1\Attribute[] $attributes Customer-determined order properties.
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Gets expectations
     *
     * @return \AmazonBusinessApi\Model\OrderingV1\Expectation[]
     */
    public function getExpectations()
    {
        return $this->container['expectations'];
    }

    /**
     * Sets expectations
     *
     * @param \AmazonBusinessApi\Model\OrderingV1\Expectation[] $expectations Customer expectations about aspects of an order they do not directly control.
     *
     * @return self
     */
    public function setExpectations($expectations)
    {
        $this->container['expectations'] = $expectations;

        return $this;
    }
}


