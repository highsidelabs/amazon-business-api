<?php
/**
 * BusinessRole
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  AmazonBusinessApi
 */

/**
 * Amazon Business API for Managing Accounts.
 *
 * An API for managing Amazon Business accounts.
 *
 * The version of the OpenAPI document: 2021-08-30
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonBusinessApi\Model\UserManagementV20210830;

use AmazonBusinessApi\Model\ModelInterface;
use AmazonBusinessApi\ObjectSerializer;
use ArrayAccess;

/**
 * BusinessRole Class Doc Comment
 *
 * @category Class
 * @description An Amazon Business user role.
 * @package  AmazonBusinessApi
 * @group 
 */
class BusinessRole
{
    public $value;

    /**
     * Possible values of this enum
     */
    const REQUISITIONER = 'Requisitioner';
    const PUNCHOUT_USER = 'PunchoutUser';
    const ADMINISTRATOR = 'Administrator';
    const FINANCE = 'Finance';
    const TECH = 'Tech';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        $baseVals = [
            self::REQUISITIONER,
            self::PUNCHOUT_USER,
            self::ADMINISTRATOR,
            self::FINANCE,
            self::TECH,
        ];
        // This is necessary because Amazon does not consistently capitalize their
        // enum values, so we do case-insensitive enum value validation in ObjectSerializer
        $ucVals = array_map(function ($val) { return strtoupper($val); }, $baseVals);
        return array_merge($baseVals, $ucVals);
    }

    public function __construct($value)
    {
        if (is_null($value) || !in_array($value, self::getAllowableEnumValues(), true)) {
            throw new \InvalidArgumentException(sprintf("Invalid value for enum 'BusinessRole', must be one of '%s'", implode("', '", self::getAllowableEnumValues())));
        }

        $this->value = $value;
    }

    /**
     * Convert the enum value to a string.
     *
     * @return string
     */
    public function __toString()
    {
        return $this->value;
    }
}


